// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get deployed service version information
    ///
    /// Endpoint to read deployed service version information.
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(AppController_getVersion)`.
    func AppController_getVersion(_ input: Operations.AppController_getVersion.Input) async throws -> Operations.AppController_getVersion.Output
    /// Get deployed service status information
    ///
    /// Endpoint to read deployed service status information.
    ///
    /// - Remark: HTTP `GET /system/status`.
    /// - Remark: Generated from `#/paths//system/status/get(AppController_getSystemStatus)`.
    func AppController_getSystemStatus(_ input: Operations.AppController_getSystemStatus.Input) async throws -> Operations.AppController_getSystemStatus.Output
    /// Wallet metrics
    ///
    /// - Remark: HTTP `GET /system/metrics/wallets`.
    /// - Remark: Generated from `#/paths//system/metrics/wallets/get(SystemMetricsController_getWalletCounts)`.
    func SystemMetricsController_getWalletCounts(_ input: Operations.SystemMetricsController_getWalletCounts.Input) async throws -> Operations.SystemMetricsController_getWalletCounts.Output
    /// Register or find a Wallet
    ///
    /// Register a new Wallet. Optionally use `external_reference`. When a Wallet exists with the given `external_reference`, the existing Wallet information is returned making the operation idempotent.
    /// If `external_reference` is not used a new Wallet is always created.
    ///
    /// Based on the configuration of the component, a Wallet has a default key and DID assigned to it. This key and DID are used to register and authenticate the Wallet with the SVX API.
    ///
    ///
    /// - Remark: HTTP `POST /wallets`.
    /// - Remark: Generated from `#/paths//wallets/post(WalletsController_create)`.
    func WalletsController_create(_ input: Operations.WalletsController_create.Input) async throws -> Operations.WalletsController_create.Output
    /// Get Wallet by ID
    ///
    /// Fetch Wallet information by ID.
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/get(WalletsController_getOne)`.
    func WalletsController_getOne(_ input: Operations.WalletsController_getOne.Input) async throws -> Operations.WalletsController_getOne.Output
    /// Delete Wallet by ID
    ///
    /// Deleted Wallet by ID. All information stored inside the Wallet will be deleted as well.
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/delete(WalletsController_deleteOne)`.
    func WalletsController_deleteOne(_ input: Operations.WalletsController_deleteOne.Input) async throws -> Operations.WalletsController_deleteOne.Output
    /// Create a key for a Wallet
    ///
    /// Create a new cryptographic key associated with the Wallet. Keys are created using the JOSE JWK standard using attribute strings listed in the [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml).
    ///
    /// Depending on the configuration of the service only certain cryptographic keys are supported.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/post(KeysController_create)`.
    func KeysController_create(_ input: Operations.KeysController_create.Input) async throws -> Operations.KeysController_create.Output
    /// Get a key for a Wallet
    ///
    /// Return the cryptographic key information for a key associated with a Wallet.
    ///
    /// The information returned contains only header and public attributes of the key, i.e. not the private key information which is kept in the Wallet. Key information is returned in the JOSE JWK standard using attribute strings listed in the [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml).
    ///
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/keys/{keyId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/get(KeysController_get)`.
    func KeysController_get(_ input: Operations.KeysController_get.Input) async throws -> Operations.KeysController_get.Output
    /// Delete a key from a Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/keys/{keyId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/delete(KeysController_delete)`.
    func KeysController_delete(_ input: Operations.KeysController_delete.Input) async throws -> Operations.KeysController_delete.Output
    /// Import a key to a Wallet
    ///
    /// Import an existing cryptographic key to a Wallet using the JOSE JWK notation.
    ///
    /// Depending on the configuration of the service only certain cryptographic keys are supported.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys/import`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/import/post(KeyController_Import)`.
    func KeyController_Import(_ input: Operations.KeyController_Import.Input) async throws -> Operations.KeyController_Import.Output
    /// Sign data with a key from a wallet
    ///
    /// Create a signature based on data provided using a cryptographic key associated with a Wallet.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys/{keyId}/sign`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/sign/post(KeyController_sign)`.
    func KeyController_sign(_ input: Operations.KeyController_sign.Input) async throws -> Operations.KeyController_sign.Output
    /// Create a DID for a Wallet
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/dids`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/post(DidController_create)`.
    func DidController_create(_ input: Operations.DidController_create.Input) async throws -> Operations.DidController_create.Output
    /// Delete a DID from a Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/dids/{id}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/{id}/delete(DidController_delete)`.
    func DidController_delete(_ input: Operations.DidController_delete.Input) async throws -> Operations.DidController_delete.Output
    /// Get credential receive states
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/receive`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get(ReceiveController_findAll)`.
    func ReceiveController_findAll(_ input: Operations.ReceiveController_findAll.Input) async throws -> Operations.ReceiveController_findAll.Output
    /// Register credential offer
    ///
    /// Credential offer is a JSON encoded object that the issuer uses to pass information to the wallet and initiate the issuance process.
    /// This endpoint is used to validate, parse and extract the necessary information, leading to the next step in the process, getting an access token.
    ///
    /// For more information on the structure of the credential offer object, see section 4.1 in OpenID4VCI.
    ///
    /// The three supported methods for registering a credential offer are:
    /// - `credential_offer`: Pass the JSON object by value
    /// - `credential_offer_uri`: Pass the JSON object by reference. The service performs a GET request to retrieve the object.
    /// - `credential_offer_endpoint` - Credential Offer sent by the issuer to the wallet credential offer endpoint. It contains a single URI query parameter, either credential_offer or credential_offer_uri
    ///
    /// Note that the options above are mutually exclusive.
    ///
    /// After successfully registering the credential offer, a state is returned. This state is used as an identifier to link subsequent calls to receive endpoints.
    ///
    /// ### Next Step
    ///
    /// To continue the issuance process, call:
    ///
    /// ```POST /wallets/{walletId}/receive/get_access_token```
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/post(ReceiveController_create)`.
    func ReceiveController_create(_ input: Operations.ReceiveController_create.Input) async throws -> Operations.ReceiveController_create.Output
    /// Get access token
    ///
    /// The get access token endpoint ensures the wallet is able to retrieve a valid access token to go to the next step of actually getting the credential(s).
    ///
    /// Two flows that are supported are:
    /// - Pre-Authorized Code Flow
    /// - Authorization Code Flow
    ///
    /// ### Authorization Code Flow
    ///
    /// Uses the `authorization_code` as defined in RFC6749 to issue access tokens.
    ///
    /// This is usually a two-step process, that involves authentication on the front channel (through a browser window) to be performed by the client.
    ///
    /// In step 1, a call to this endpoint returns the `authorization_url`. This URL is what needs to be opened in a browser window and will authenticate the end-user to the service.
    /// This includes a redirect_uri responsible for receiving and storing the `authorization_code`.
    ///
    /// In step 2, the service, exchanges the code for an access token by calling the Token Endpoint.
    ///
    /// Note that at this point, the wallet initiated Authorization Code flow is not supported.
    ///
    /// ### Pre-Authorized Code Flow
    ///
    /// This flow is used when the issuer has already authenticated and authorized the end-user.
    /// The issuer provides a Pre-Authorized Code in the credential offer which is used to exchange it for an access token in the Token Endpoint.
    /// The Authorization Endpoint is not used in this flow.
    ///
    /// For more information, see section 3.5 in OpenID4VCI.
    ///
    /// ### Next Step
    ///
    /// To continue the issuance process, call:
    ///
    /// ```POST /wallets/{walletId}/receive/get_credential```
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive/get_access_token`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_access_token/post(ReceiveController_getAccessToken)`.
    func ReceiveController_getAccessToken(_ input: Operations.ReceiveController_getAccessToken.Input) async throws -> Operations.ReceiveController_getAccessToken.Output
    /// Get verifiable credential
    ///
    /// Get credential from the issuer and perform key binding. A valid access token is required in order to call this endpoint.
    ///
    /// See section 7 in OpenID4VCI for more information.
    ///
    /// ### Key Binding
    ///
    /// Key binding is performed by providing either
    ///
    /// - `kid`: Public key is presented.
    /// - `did`: DID is presented referencing one of the keys contained in the `verificationMethod` section of the DID document.
    ///
    /// Both methods involve the wallet presenting key proof to the issuer to ensure control over cryptographic key material.
    ///
    /// See section 7.2.1 in OpenID4VCI for more information.
    ///
    /// ### Requesting Multiple Credentials in Sequence
    ///
    /// The `c_nonce` and `c_nonce_expires_in` returned by the issuer allow requesting the same credential, but binding it to different key material.
    /// The service automatically manages these attributes, ensuring the correct `c_nonce` is used, allowing multiple credentials to be retrieved, but with different keys.
    ///
    /// ### Not Supported Options
    ///
    /// Note that the following are not supported by the endpoint
    ///
    /// - `transaction_id`: Part of the deferred issuance flow, allows receiving a credential by referencing a `transaction_id`
    /// - Receiving encrypted credentials
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive/get_credential`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_credential/post(ReceiveController_getCredential)`.
    func ReceiveController_getCredential(_ input: Operations.ReceiveController_getCredential.Input) async throws -> Operations.ReceiveController_getCredential.Output
    /// Get receive credential state
    ///
    /// Get the current state of a receive credential flow.
    ///
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/receive/{state}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/{state}/get(ReceiveController_findOne)`.
    func ReceiveController_findOne(_ input: Operations.ReceiveController_findOne.Input) async throws -> Operations.ReceiveController_findOne.Output
    /// authorization_code flow Holder Wallet redirect uri 
    ///
    /// `authorization_code` redirect uri that was started via `/receive` endpoint.<br/>
    /// `state` and `code` come as a query parameters.<br/>
    /// `code` is exchanged for the `access_token` so client can call `POST /wallets/{walletId}/receive/get_credential` endpoint right away.
    ///
    ///
    /// - Remark: HTTP `GET /wallets/receive/callback`.
    /// - Remark: Generated from `#/paths//wallets/receive/callback/get(ReceiveController_callback)`.
    func ReceiveController_callback(_ input: Operations.ReceiveController_callback.Input) async throws -> Operations.ReceiveController_callback.Output
    /// Get presentation states
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/send`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/get(PresentationController_findAll)`.
    func PresentationController_findAll(_ input: Operations.PresentationController_findAll.Input) async throws -> Operations.PresentationController_findAll.Output
    /// Register authorization request
    ///
    /// Parse the authorization request URI and get the following information.
    ///
    /// - `client_id`: The Client ID of the verifier.
    /// - `client_id_scheme`: The Client ID scheme of the verifier.
    /// - `client_metadata`: Verifier client metadata.
    /// - `nonce`: Nonce provided by the verifier to be returned in the response
    /// - `presentation_definition`: What credentials the verifier is requesting from the Wallet.
    /// - `redirect_uri`: The redirect URI of the verifier.
    /// - `response_mode`: How to return the response.
    /// - `response_type`: Which parameters to use to return the presentation to the verifier.
    /// - `response_uri`: Where to send the response.
    /// - `verifier_state`: State passed by the verifier to link request and response.
    /// - `meta.protocol_version`: Version of the protocol to be used. Supported values `draft10` and `draft18`. The default value is `draft10`.
    ///
    /// This information informs the Wallet how to process the request and respond to the verifier.
    ///
    /// ## Request Parameters
    ///
    /// The following sections describe in more detail the parameters, their default values and behaviour.
    ///
    /// ### client_id (required)
    ///
    /// Depending on the `client_id_scheme` the Client ID is either the `client_id`, the `redirect_uri` or the `did` of the verifier.
    ///
    /// ### client_id_scheme
    ///
    /// The mechanism to obtain and validate metadata of a verifier beyond that specified in RFC6749.
    ///
    /// Currently supported values are:
    /// - `pre-registered` (default): The verifier is pre-registered with the SVX Platform.
    /// - `redirect_uri`: The redirect URI is the identifier of the verifier. Note that in this case the request MUST NOT be signed.
    /// - `did`: The DID is the identifier of the verifier. Note that in this case the request MUST be signed with a `verificationMethod` property in the DID document. This also requires that verifier metadata is passed using `client_metadata` or `client_metadata_uri`.
    ///
    /// ### client_metadata (required)
    ///
    /// Client metadata, also called verifier metadata in this case can be implemented using static configuration values, as well as employ Dynamic Discovery.
    ///
    /// The static configuration is usually bound to an existing profile, for example.
    ///
    /// - [JWT VC Presentation Profile](https://identity.foundation/jwt-vc-presentation-profile/)
    /// - [HAIP](https://openid.net/specs/openid4vc-high-assurance-interoperability-profile-sd-jwt-vc-1_0-00.html)
    ///
    /// They use specific, custom URL schemes such as `openid-vc` or `haip`. When these are used, values referred to in these profiles should be used as client metadata.
    ///
    /// Each network can define their own set of static configuration values for client metadata.
    ///
    /// The use of fedarations or trust schemes is not yet supported.
    ///
    /// ### nonce
    ///
    /// Nonce to be returned in the response to prevent replay attacks.
    ///
    /// ### presentation_definition (required)
    ///
    /// Expresses which credentials a verifier asks a wallet to present. The syntax to do this should conform to DIF Presentation Exchange specification.
    /// The structure of the definition is validated by a JSON schema associated with the `presentation_definition` schema in the OpenAPI definition.
    ///
    /// It is also possible to use `presentation_definition_uri`. In this case the wallet performs a GET request to the `presentation_definition_uri` and parses the response.
    /// The response is stored in the `presentation_definition` attribute.
    ///
    /// Note that the service does not necessarily support all options defined in the Presentation Exchange specification.
    ///
    /// ### response_mode
    ///
    /// How the response is sent to the verifier. Possible values are
    ///
    /// - `direct_post`: In this mode, the Authorization Response is sent to the Verifier using an HTTPS POST request to an endpoint controlled by the Verifier. The Authorization Response parameters are encoded in the body using the application/x-www-form-urlencoded content type.
    ///
    /// When using `direct_post`, note that the `redirect_uri` must be returned after successfully posting the Authorization Response to the `response_uri`.
    ///
    /// Note that `fragment` is currently not supported.
    ///
    /// ### response_uri
    ///
    /// If the `response_mode` is `direct_post` this is the URI to send the response to.
    ///
    /// ### verifier_state
    ///
    /// Opaque state that can be used to link the request and response. Is returned as the `state` parameter in the Authorization Response.
    ///
    /// ## Use of JAR (RFC9101)
    ///
    /// JAR (RFC9101) is a JWT representation of the request. The JWT is signed with the verifier's private key.
    /// There are two ways to do this.
    ///
    /// - `request`: The `request` parameter is the JWT representation of the request.
    /// - `request_uri`: The `request_uri` parameter is the URL of the request.
    ///
    /// In most cases `request_uri` is used instead of `request` as it is more convenient, especially in situations when a QR code is used to represent the authorization request.
    ///
    /// The JAR contains the necessary information and is fetched, verified and subsequently parsed. See the previous section for more details.
    ///
    /// ## Examples
    ///
    /// Below are some examples of valid authorization requests and how they are parsed.
    ///
    /// ```
    /// openid-vc://?request_uri=https://example.com/oidc/presentations/requests/c63aa3e9-dc7d-4753-9ac8-30bf7add6e4c/jwt&client_id=https://example.com/cb
    /// ```
    ///
    /// This is an example where JAR is used. First, the `request_uri` is used to fetch the request JWT. The JWT is validated and then parsed. The parsed request is stored in the `metadata.request` attribute.
    /// All the required information, except for the `client_id` is fetched from the JWT, validated and stored.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/post(PresentationController_create)`.
    func PresentationController_create(_ input: Operations.PresentationController_create.Input) async throws -> Operations.PresentationController_create.Output
    /// Set the credentials to be presented
    ///
    /// Set the credentials to be presented as part of this presentation response.
    ///
    /// Each credential must be linked to an input descriptor from the credential definition.
    /// For credentials that support selective disclosure, there is the possibility to use the `claims_to_disclose` property.
    /// Use object notation to specify which claims to disclose. For example:
    ///
    /// ```
    /// "claims_to_disclose": ["given_name", "address.street_address", "address.locality", "nationalities[0]"]
    /// ```
    ///
    /// If a claim or a nested claim is not found in the credential or it doesn't support selective disclosure, it will be ignored.
    ///
    /// By default, the key ID linked to the credential is used to sign the presentation. The `kid` property can be used to specify another key ID. If no key ID is linked to the credential and none is specified, no signature is added to the presentation.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send/set_credentials`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/set_credentials/post(SendController_setCredentials)`.
    func SendController_setCredentials(_ input: Operations.SendController_setCredentials.Input) async throws -> Operations.SendController_setCredentials.Output
    /// Submit the presentation response to the verifier
    ///
    /// Generate the presentation response to present the credentials to the verifier.
    ///
    /// Based on the `response_type`, the following parameters are included in the response:
    ///
    /// The response always includes:
    /// - `vp_token`: A single JSON string or array of JSON strings representing the presentation.
    /// - `presentation_submission`: A JSON object containing the mapping between the requested credentials and where to find them in the returned VP token. This follows the DIF Presentation Exchange specification.
    ///
    /// Optionally, the following is also included:
    /// - `id_token`: A single JSON string that proves control of the wallet over key material.
    ///
    /// Depending on the `response_mode` option, the response can be sent to the verifier using an HTTPS POST request or an HTTP redirect.
    ///
    /// In case of `response_mode=fragment` (default), the response is sent via the front channel by opening the `redirect_uri`, which is returned in the response to this request.
    /// This `redirect_uri` includes all the response parameters. Note that this is currently not supported.
    ///
    /// In case of `response_mode=direct_post` or `response_mode=post`, the response is submitted via an HTTPS POST request to the `response_uri`.
    /// In this case, it is expected that a `redirect_uri` is returned in the response to this request.
    /// This `redirect_uri` is also to be opened in the front channel, but is simply used to continue the verification process and not to transmit the response to the verifier.
    ///
    /// The status of this submission can be tracked via the `meta.submission_status` attribute. Note that in case of `response_mode=fragment`, the status is always `success`.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send/submit`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/submit/post(SendController_submit)`.
    func SendController_submit(_ input: Operations.SendController_submit.Input) async throws -> Operations.SendController_submit.Output
    /// Get present credential state
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/send/{state}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/{state}/get(SendController_findOne)`.
    func SendController_findOne(_ input: Operations.SendController_findOne.Input) async throws -> Operations.SendController_findOne.Output
    /// Import credential
    ///
    /// Import an existing credential from a known format into a Wallet.
    ///
    /// Depending on how key binding is performed, the import process associates the credential with the given `did` and/or `kid` if managed by the wallet:
    /// - `did`: The DID used for binding a DID to the credential.
    /// - `kid`: The key ID used for binding the key to the credential.
    ///
    /// If the `did` or `kid` is not managed by the wallet, fields are ignored. They can later be updated with `PATCH /wallets/{walletId}/credentials/{credentialId}`.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/credentials/import`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/import/post(CredentialsController_import)`.
    func CredentialsController_import(_ input: Operations.CredentialsController_import.Input) async throws -> Operations.CredentialsController_import.Output
    /// Get credentials
    ///
    /// Fetch a paginated list of credentials stored inside the Wallet.
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/get(CredentialsController_findAll)`.
    func CredentialsController_findAll(_ input: Operations.CredentialsController_findAll.Input) async throws -> Operations.CredentialsController_findAll.Output
    /// Get credential by ID
    ///
    /// Fetch credential information by ID stored inside the Wallet
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/get(CredentialsController_findOne)`.
    func CredentialsController_findOne(_ input: Operations.CredentialsController_findOne.Input) async throws -> Operations.CredentialsController_findOne.Output
    /// Patch credential by ID
    ///
    /// Patches credential stored inside a Wallet.
    ///
    /// Used to update `did` and `kid` fields in the meta data of the credential. Note that the `did` and `kid` need to reference an existing DID and Key Id.
    ///
    ///
    /// - Remark: HTTP `PATCH /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/patch(CredentialsController_patch)`.
    func CredentialsController_patch(_ input: Operations.CredentialsController_patch.Input) async throws -> Operations.CredentialsController_patch.Output
    /// Delete credential by ID
    ///
    /// Deletes credential by ID stored inside the Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/delete(CredentialsController_remove)`.
    func CredentialsController_remove(_ input: Operations.CredentialsController_remove.Input) async throws -> Operations.CredentialsController_remove.Output
    /// Verify credential by ID
    ///
    /// Verifies a verifiable credential by ID that is stored inside the Wallet
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials/{vcId}/verify`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/verify/get(CredentialsController_verify)`.
    func CredentialsController_verify(_ input: Operations.CredentialsController_verify.Input) async throws -> Operations.CredentialsController_verify.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get deployed service version information
    ///
    /// Endpoint to read deployed service version information.
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(AppController_getVersion)`.
    public func AppController_getVersion(headers: Operations.AppController_getVersion.Input.Headers = .init()) async throws -> Operations.AppController_getVersion.Output {
        try await AppController_getVersion(Operations.AppController_getVersion.Input(headers: headers))
    }
    /// Get deployed service status information
    ///
    /// Endpoint to read deployed service status information.
    ///
    /// - Remark: HTTP `GET /system/status`.
    /// - Remark: Generated from `#/paths//system/status/get(AppController_getSystemStatus)`.
    public func AppController_getSystemStatus(headers: Operations.AppController_getSystemStatus.Input.Headers = .init()) async throws -> Operations.AppController_getSystemStatus.Output {
        try await AppController_getSystemStatus(Operations.AppController_getSystemStatus.Input(headers: headers))
    }
    /// Wallet metrics
    ///
    /// - Remark: HTTP `GET /system/metrics/wallets`.
    /// - Remark: Generated from `#/paths//system/metrics/wallets/get(SystemMetricsController_getWalletCounts)`.
    public func SystemMetricsController_getWalletCounts(
        query: Operations.SystemMetricsController_getWalletCounts.Input.Query = .init(),
        headers: Operations.SystemMetricsController_getWalletCounts.Input.Headers = .init()
    ) async throws -> Operations.SystemMetricsController_getWalletCounts.Output {
        try await SystemMetricsController_getWalletCounts(Operations.SystemMetricsController_getWalletCounts.Input(
            query: query,
            headers: headers
        ))
    }
    /// Register or find a Wallet
    ///
    /// Register a new Wallet. Optionally use `external_reference`. When a Wallet exists with the given `external_reference`, the existing Wallet information is returned making the operation idempotent.
    /// If `external_reference` is not used a new Wallet is always created.
    ///
    /// Based on the configuration of the component, a Wallet has a default key and DID assigned to it. This key and DID are used to register and authenticate the Wallet with the SVX API.
    ///
    ///
    /// - Remark: HTTP `POST /wallets`.
    /// - Remark: Generated from `#/paths//wallets/post(WalletsController_create)`.
    public func WalletsController_create(
        headers: Operations.WalletsController_create.Input.Headers = .init(),
        body: Operations.WalletsController_create.Input.Body
    ) async throws -> Operations.WalletsController_create.Output {
        try await WalletsController_create(Operations.WalletsController_create.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get Wallet by ID
    ///
    /// Fetch Wallet information by ID.
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/get(WalletsController_getOne)`.
    public func WalletsController_getOne(
        path: Operations.WalletsController_getOne.Input.Path,
        headers: Operations.WalletsController_getOne.Input.Headers = .init()
    ) async throws -> Operations.WalletsController_getOne.Output {
        try await WalletsController_getOne(Operations.WalletsController_getOne.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete Wallet by ID
    ///
    /// Deleted Wallet by ID. All information stored inside the Wallet will be deleted as well.
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/delete(WalletsController_deleteOne)`.
    public func WalletsController_deleteOne(
        path: Operations.WalletsController_deleteOne.Input.Path,
        headers: Operations.WalletsController_deleteOne.Input.Headers = .init()
    ) async throws -> Operations.WalletsController_deleteOne.Output {
        try await WalletsController_deleteOne(Operations.WalletsController_deleteOne.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a key for a Wallet
    ///
    /// Create a new cryptographic key associated with the Wallet. Keys are created using the JOSE JWK standard using attribute strings listed in the [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml).
    ///
    /// Depending on the configuration of the service only certain cryptographic keys are supported.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/post(KeysController_create)`.
    public func KeysController_create(
        path: Operations.KeysController_create.Input.Path,
        headers: Operations.KeysController_create.Input.Headers = .init(),
        body: Operations.KeysController_create.Input.Body
    ) async throws -> Operations.KeysController_create.Output {
        try await KeysController_create(Operations.KeysController_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a key for a Wallet
    ///
    /// Return the cryptographic key information for a key associated with a Wallet.
    ///
    /// The information returned contains only header and public attributes of the key, i.e. not the private key information which is kept in the Wallet. Key information is returned in the JOSE JWK standard using attribute strings listed in the [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml).
    ///
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/keys/{keyId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/get(KeysController_get)`.
    public func KeysController_get(
        path: Operations.KeysController_get.Input.Path,
        headers: Operations.KeysController_get.Input.Headers = .init()
    ) async throws -> Operations.KeysController_get.Output {
        try await KeysController_get(Operations.KeysController_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a key from a Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/keys/{keyId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/delete(KeysController_delete)`.
    public func KeysController_delete(
        path: Operations.KeysController_delete.Input.Path,
        headers: Operations.KeysController_delete.Input.Headers = .init()
    ) async throws -> Operations.KeysController_delete.Output {
        try await KeysController_delete(Operations.KeysController_delete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Import a key to a Wallet
    ///
    /// Import an existing cryptographic key to a Wallet using the JOSE JWK notation.
    ///
    /// Depending on the configuration of the service only certain cryptographic keys are supported.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys/import`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/import/post(KeyController_Import)`.
    public func KeyController_Import(
        path: Operations.KeyController_Import.Input.Path,
        headers: Operations.KeyController_Import.Input.Headers = .init(),
        body: Operations.KeyController_Import.Input.Body
    ) async throws -> Operations.KeyController_Import.Output {
        try await KeyController_Import(Operations.KeyController_Import.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Sign data with a key from a wallet
    ///
    /// Create a signature based on data provided using a cryptographic key associated with a Wallet.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys/{keyId}/sign`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/sign/post(KeyController_sign)`.
    public func KeyController_sign(
        path: Operations.KeyController_sign.Input.Path,
        headers: Operations.KeyController_sign.Input.Headers = .init(),
        body: Operations.KeyController_sign.Input.Body
    ) async throws -> Operations.KeyController_sign.Output {
        try await KeyController_sign(Operations.KeyController_sign.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create a DID for a Wallet
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/dids`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/post(DidController_create)`.
    public func DidController_create(
        path: Operations.DidController_create.Input.Path,
        headers: Operations.DidController_create.Input.Headers = .init(),
        body: Operations.DidController_create.Input.Body
    ) async throws -> Operations.DidController_create.Output {
        try await DidController_create(Operations.DidController_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a DID from a Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/dids/{id}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/{id}/delete(DidController_delete)`.
    public func DidController_delete(
        path: Operations.DidController_delete.Input.Path,
        headers: Operations.DidController_delete.Input.Headers = .init()
    ) async throws -> Operations.DidController_delete.Output {
        try await DidController_delete(Operations.DidController_delete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get credential receive states
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/receive`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get(ReceiveController_findAll)`.
    public func ReceiveController_findAll(
        path: Operations.ReceiveController_findAll.Input.Path,
        query: Operations.ReceiveController_findAll.Input.Query = .init(),
        headers: Operations.ReceiveController_findAll.Input.Headers = .init()
    ) async throws -> Operations.ReceiveController_findAll.Output {
        try await ReceiveController_findAll(Operations.ReceiveController_findAll.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Register credential offer
    ///
    /// Credential offer is a JSON encoded object that the issuer uses to pass information to the wallet and initiate the issuance process.
    /// This endpoint is used to validate, parse and extract the necessary information, leading to the next step in the process, getting an access token.
    ///
    /// For more information on the structure of the credential offer object, see section 4.1 in OpenID4VCI.
    ///
    /// The three supported methods for registering a credential offer are:
    /// - `credential_offer`: Pass the JSON object by value
    /// - `credential_offer_uri`: Pass the JSON object by reference. The service performs a GET request to retrieve the object.
    /// - `credential_offer_endpoint` - Credential Offer sent by the issuer to the wallet credential offer endpoint. It contains a single URI query parameter, either credential_offer or credential_offer_uri
    ///
    /// Note that the options above are mutually exclusive.
    ///
    /// After successfully registering the credential offer, a state is returned. This state is used as an identifier to link subsequent calls to receive endpoints.
    ///
    /// ### Next Step
    ///
    /// To continue the issuance process, call:
    ///
    /// ```POST /wallets/{walletId}/receive/get_access_token```
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/post(ReceiveController_create)`.
    public func ReceiveController_create(
        path: Operations.ReceiveController_create.Input.Path,
        headers: Operations.ReceiveController_create.Input.Headers = .init(),
        body: Operations.ReceiveController_create.Input.Body
    ) async throws -> Operations.ReceiveController_create.Output {
        try await ReceiveController_create(Operations.ReceiveController_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get access token
    ///
    /// The get access token endpoint ensures the wallet is able to retrieve a valid access token to go to the next step of actually getting the credential(s).
    ///
    /// Two flows that are supported are:
    /// - Pre-Authorized Code Flow
    /// - Authorization Code Flow
    ///
    /// ### Authorization Code Flow
    ///
    /// Uses the `authorization_code` as defined in RFC6749 to issue access tokens.
    ///
    /// This is usually a two-step process, that involves authentication on the front channel (through a browser window) to be performed by the client.
    ///
    /// In step 1, a call to this endpoint returns the `authorization_url`. This URL is what needs to be opened in a browser window and will authenticate the end-user to the service.
    /// This includes a redirect_uri responsible for receiving and storing the `authorization_code`.
    ///
    /// In step 2, the service, exchanges the code for an access token by calling the Token Endpoint.
    ///
    /// Note that at this point, the wallet initiated Authorization Code flow is not supported.
    ///
    /// ### Pre-Authorized Code Flow
    ///
    /// This flow is used when the issuer has already authenticated and authorized the end-user.
    /// The issuer provides a Pre-Authorized Code in the credential offer which is used to exchange it for an access token in the Token Endpoint.
    /// The Authorization Endpoint is not used in this flow.
    ///
    /// For more information, see section 3.5 in OpenID4VCI.
    ///
    /// ### Next Step
    ///
    /// To continue the issuance process, call:
    ///
    /// ```POST /wallets/{walletId}/receive/get_credential```
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive/get_access_token`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_access_token/post(ReceiveController_getAccessToken)`.
    public func ReceiveController_getAccessToken(
        path: Operations.ReceiveController_getAccessToken.Input.Path,
        headers: Operations.ReceiveController_getAccessToken.Input.Headers = .init(),
        body: Operations.ReceiveController_getAccessToken.Input.Body
    ) async throws -> Operations.ReceiveController_getAccessToken.Output {
        try await ReceiveController_getAccessToken(Operations.ReceiveController_getAccessToken.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get verifiable credential
    ///
    /// Get credential from the issuer and perform key binding. A valid access token is required in order to call this endpoint.
    ///
    /// See section 7 in OpenID4VCI for more information.
    ///
    /// ### Key Binding
    ///
    /// Key binding is performed by providing either
    ///
    /// - `kid`: Public key is presented.
    /// - `did`: DID is presented referencing one of the keys contained in the `verificationMethod` section of the DID document.
    ///
    /// Both methods involve the wallet presenting key proof to the issuer to ensure control over cryptographic key material.
    ///
    /// See section 7.2.1 in OpenID4VCI for more information.
    ///
    /// ### Requesting Multiple Credentials in Sequence
    ///
    /// The `c_nonce` and `c_nonce_expires_in` returned by the issuer allow requesting the same credential, but binding it to different key material.
    /// The service automatically manages these attributes, ensuring the correct `c_nonce` is used, allowing multiple credentials to be retrieved, but with different keys.
    ///
    /// ### Not Supported Options
    ///
    /// Note that the following are not supported by the endpoint
    ///
    /// - `transaction_id`: Part of the deferred issuance flow, allows receiving a credential by referencing a `transaction_id`
    /// - Receiving encrypted credentials
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive/get_credential`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_credential/post(ReceiveController_getCredential)`.
    public func ReceiveController_getCredential(
        path: Operations.ReceiveController_getCredential.Input.Path,
        headers: Operations.ReceiveController_getCredential.Input.Headers = .init(),
        body: Operations.ReceiveController_getCredential.Input.Body
    ) async throws -> Operations.ReceiveController_getCredential.Output {
        try await ReceiveController_getCredential(Operations.ReceiveController_getCredential.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get receive credential state
    ///
    /// Get the current state of a receive credential flow.
    ///
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/receive/{state}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/{state}/get(ReceiveController_findOne)`.
    public func ReceiveController_findOne(
        path: Operations.ReceiveController_findOne.Input.Path,
        headers: Operations.ReceiveController_findOne.Input.Headers = .init()
    ) async throws -> Operations.ReceiveController_findOne.Output {
        try await ReceiveController_findOne(Operations.ReceiveController_findOne.Input(
            path: path,
            headers: headers
        ))
    }
    /// authorization_code flow Holder Wallet redirect uri 
    ///
    /// `authorization_code` redirect uri that was started via `/receive` endpoint.<br/>
    /// `state` and `code` come as a query parameters.<br/>
    /// `code` is exchanged for the `access_token` so client can call `POST /wallets/{walletId}/receive/get_credential` endpoint right away.
    ///
    ///
    /// - Remark: HTTP `GET /wallets/receive/callback`.
    /// - Remark: Generated from `#/paths//wallets/receive/callback/get(ReceiveController_callback)`.
    public func ReceiveController_callback() async throws -> Operations.ReceiveController_callback.Output {
        try await ReceiveController_callback(Operations.ReceiveController_callback.Input())
    }
    /// Get presentation states
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/send`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/get(PresentationController_findAll)`.
    public func PresentationController_findAll(
        path: Operations.PresentationController_findAll.Input.Path,
        query: Operations.PresentationController_findAll.Input.Query = .init(),
        headers: Operations.PresentationController_findAll.Input.Headers = .init()
    ) async throws -> Operations.PresentationController_findAll.Output {
        try await PresentationController_findAll(Operations.PresentationController_findAll.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Register authorization request
    ///
    /// Parse the authorization request URI and get the following information.
    ///
    /// - `client_id`: The Client ID of the verifier.
    /// - `client_id_scheme`: The Client ID scheme of the verifier.
    /// - `client_metadata`: Verifier client metadata.
    /// - `nonce`: Nonce provided by the verifier to be returned in the response
    /// - `presentation_definition`: What credentials the verifier is requesting from the Wallet.
    /// - `redirect_uri`: The redirect URI of the verifier.
    /// - `response_mode`: How to return the response.
    /// - `response_type`: Which parameters to use to return the presentation to the verifier.
    /// - `response_uri`: Where to send the response.
    /// - `verifier_state`: State passed by the verifier to link request and response.
    /// - `meta.protocol_version`: Version of the protocol to be used. Supported values `draft10` and `draft18`. The default value is `draft10`.
    ///
    /// This information informs the Wallet how to process the request and respond to the verifier.
    ///
    /// ## Request Parameters
    ///
    /// The following sections describe in more detail the parameters, their default values and behaviour.
    ///
    /// ### client_id (required)
    ///
    /// Depending on the `client_id_scheme` the Client ID is either the `client_id`, the `redirect_uri` or the `did` of the verifier.
    ///
    /// ### client_id_scheme
    ///
    /// The mechanism to obtain and validate metadata of a verifier beyond that specified in RFC6749.
    ///
    /// Currently supported values are:
    /// - `pre-registered` (default): The verifier is pre-registered with the SVX Platform.
    /// - `redirect_uri`: The redirect URI is the identifier of the verifier. Note that in this case the request MUST NOT be signed.
    /// - `did`: The DID is the identifier of the verifier. Note that in this case the request MUST be signed with a `verificationMethod` property in the DID document. This also requires that verifier metadata is passed using `client_metadata` or `client_metadata_uri`.
    ///
    /// ### client_metadata (required)
    ///
    /// Client metadata, also called verifier metadata in this case can be implemented using static configuration values, as well as employ Dynamic Discovery.
    ///
    /// The static configuration is usually bound to an existing profile, for example.
    ///
    /// - [JWT VC Presentation Profile](https://identity.foundation/jwt-vc-presentation-profile/)
    /// - [HAIP](https://openid.net/specs/openid4vc-high-assurance-interoperability-profile-sd-jwt-vc-1_0-00.html)
    ///
    /// They use specific, custom URL schemes such as `openid-vc` or `haip`. When these are used, values referred to in these profiles should be used as client metadata.
    ///
    /// Each network can define their own set of static configuration values for client metadata.
    ///
    /// The use of fedarations or trust schemes is not yet supported.
    ///
    /// ### nonce
    ///
    /// Nonce to be returned in the response to prevent replay attacks.
    ///
    /// ### presentation_definition (required)
    ///
    /// Expresses which credentials a verifier asks a wallet to present. The syntax to do this should conform to DIF Presentation Exchange specification.
    /// The structure of the definition is validated by a JSON schema associated with the `presentation_definition` schema in the OpenAPI definition.
    ///
    /// It is also possible to use `presentation_definition_uri`. In this case the wallet performs a GET request to the `presentation_definition_uri` and parses the response.
    /// The response is stored in the `presentation_definition` attribute.
    ///
    /// Note that the service does not necessarily support all options defined in the Presentation Exchange specification.
    ///
    /// ### response_mode
    ///
    /// How the response is sent to the verifier. Possible values are
    ///
    /// - `direct_post`: In this mode, the Authorization Response is sent to the Verifier using an HTTPS POST request to an endpoint controlled by the Verifier. The Authorization Response parameters are encoded in the body using the application/x-www-form-urlencoded content type.
    ///
    /// When using `direct_post`, note that the `redirect_uri` must be returned after successfully posting the Authorization Response to the `response_uri`.
    ///
    /// Note that `fragment` is currently not supported.
    ///
    /// ### response_uri
    ///
    /// If the `response_mode` is `direct_post` this is the URI to send the response to.
    ///
    /// ### verifier_state
    ///
    /// Opaque state that can be used to link the request and response. Is returned as the `state` parameter in the Authorization Response.
    ///
    /// ## Use of JAR (RFC9101)
    ///
    /// JAR (RFC9101) is a JWT representation of the request. The JWT is signed with the verifier's private key.
    /// There are two ways to do this.
    ///
    /// - `request`: The `request` parameter is the JWT representation of the request.
    /// - `request_uri`: The `request_uri` parameter is the URL of the request.
    ///
    /// In most cases `request_uri` is used instead of `request` as it is more convenient, especially in situations when a QR code is used to represent the authorization request.
    ///
    /// The JAR contains the necessary information and is fetched, verified and subsequently parsed. See the previous section for more details.
    ///
    /// ## Examples
    ///
    /// Below are some examples of valid authorization requests and how they are parsed.
    ///
    /// ```
    /// openid-vc://?request_uri=https://example.com/oidc/presentations/requests/c63aa3e9-dc7d-4753-9ac8-30bf7add6e4c/jwt&client_id=https://example.com/cb
    /// ```
    ///
    /// This is an example where JAR is used. First, the `request_uri` is used to fetch the request JWT. The JWT is validated and then parsed. The parsed request is stored in the `metadata.request` attribute.
    /// All the required information, except for the `client_id` is fetched from the JWT, validated and stored.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/post(PresentationController_create)`.
    public func PresentationController_create(
        path: Operations.PresentationController_create.Input.Path,
        headers: Operations.PresentationController_create.Input.Headers = .init(),
        body: Operations.PresentationController_create.Input.Body
    ) async throws -> Operations.PresentationController_create.Output {
        try await PresentationController_create(Operations.PresentationController_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set the credentials to be presented
    ///
    /// Set the credentials to be presented as part of this presentation response.
    ///
    /// Each credential must be linked to an input descriptor from the credential definition.
    /// For credentials that support selective disclosure, there is the possibility to use the `claims_to_disclose` property.
    /// Use object notation to specify which claims to disclose. For example:
    ///
    /// ```
    /// "claims_to_disclose": ["given_name", "address.street_address", "address.locality", "nationalities[0]"]
    /// ```
    ///
    /// If a claim or a nested claim is not found in the credential or it doesn't support selective disclosure, it will be ignored.
    ///
    /// By default, the key ID linked to the credential is used to sign the presentation. The `kid` property can be used to specify another key ID. If no key ID is linked to the credential and none is specified, no signature is added to the presentation.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send/set_credentials`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/set_credentials/post(SendController_setCredentials)`.
    public func SendController_setCredentials(
        path: Operations.SendController_setCredentials.Input.Path,
        headers: Operations.SendController_setCredentials.Input.Headers = .init(),
        body: Operations.SendController_setCredentials.Input.Body
    ) async throws -> Operations.SendController_setCredentials.Output {
        try await SendController_setCredentials(Operations.SendController_setCredentials.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Submit the presentation response to the verifier
    ///
    /// Generate the presentation response to present the credentials to the verifier.
    ///
    /// Based on the `response_type`, the following parameters are included in the response:
    ///
    /// The response always includes:
    /// - `vp_token`: A single JSON string or array of JSON strings representing the presentation.
    /// - `presentation_submission`: A JSON object containing the mapping between the requested credentials and where to find them in the returned VP token. This follows the DIF Presentation Exchange specification.
    ///
    /// Optionally, the following is also included:
    /// - `id_token`: A single JSON string that proves control of the wallet over key material.
    ///
    /// Depending on the `response_mode` option, the response can be sent to the verifier using an HTTPS POST request or an HTTP redirect.
    ///
    /// In case of `response_mode=fragment` (default), the response is sent via the front channel by opening the `redirect_uri`, which is returned in the response to this request.
    /// This `redirect_uri` includes all the response parameters. Note that this is currently not supported.
    ///
    /// In case of `response_mode=direct_post` or `response_mode=post`, the response is submitted via an HTTPS POST request to the `response_uri`.
    /// In this case, it is expected that a `redirect_uri` is returned in the response to this request.
    /// This `redirect_uri` is also to be opened in the front channel, but is simply used to continue the verification process and not to transmit the response to the verifier.
    ///
    /// The status of this submission can be tracked via the `meta.submission_status` attribute. Note that in case of `response_mode=fragment`, the status is always `success`.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send/submit`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/submit/post(SendController_submit)`.
    public func SendController_submit(
        path: Operations.SendController_submit.Input.Path,
        headers: Operations.SendController_submit.Input.Headers = .init(),
        body: Operations.SendController_submit.Input.Body
    ) async throws -> Operations.SendController_submit.Output {
        try await SendController_submit(Operations.SendController_submit.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get present credential state
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/send/{state}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/{state}/get(SendController_findOne)`.
    public func SendController_findOne(
        path: Operations.SendController_findOne.Input.Path,
        headers: Operations.SendController_findOne.Input.Headers = .init()
    ) async throws -> Operations.SendController_findOne.Output {
        try await SendController_findOne(Operations.SendController_findOne.Input(
            path: path,
            headers: headers
        ))
    }
    /// Import credential
    ///
    /// Import an existing credential from a known format into a Wallet.
    ///
    /// Depending on how key binding is performed, the import process associates the credential with the given `did` and/or `kid` if managed by the wallet:
    /// - `did`: The DID used for binding a DID to the credential.
    /// - `kid`: The key ID used for binding the key to the credential.
    ///
    /// If the `did` or `kid` is not managed by the wallet, fields are ignored. They can later be updated with `PATCH /wallets/{walletId}/credentials/{credentialId}`.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/credentials/import`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/import/post(CredentialsController_import)`.
    public func CredentialsController_import(
        path: Operations.CredentialsController_import.Input.Path,
        headers: Operations.CredentialsController_import.Input.Headers = .init(),
        body: Operations.CredentialsController_import.Input.Body
    ) async throws -> Operations.CredentialsController_import.Output {
        try await CredentialsController_import(Operations.CredentialsController_import.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get credentials
    ///
    /// Fetch a paginated list of credentials stored inside the Wallet.
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/get(CredentialsController_findAll)`.
    public func CredentialsController_findAll(
        path: Operations.CredentialsController_findAll.Input.Path,
        query: Operations.CredentialsController_findAll.Input.Query = .init(),
        headers: Operations.CredentialsController_findAll.Input.Headers = .init()
    ) async throws -> Operations.CredentialsController_findAll.Output {
        try await CredentialsController_findAll(Operations.CredentialsController_findAll.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get credential by ID
    ///
    /// Fetch credential information by ID stored inside the Wallet
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/get(CredentialsController_findOne)`.
    public func CredentialsController_findOne(
        path: Operations.CredentialsController_findOne.Input.Path,
        headers: Operations.CredentialsController_findOne.Input.Headers = .init()
    ) async throws -> Operations.CredentialsController_findOne.Output {
        try await CredentialsController_findOne(Operations.CredentialsController_findOne.Input(
            path: path,
            headers: headers
        ))
    }
    /// Patch credential by ID
    ///
    /// Patches credential stored inside a Wallet.
    ///
    /// Used to update `did` and `kid` fields in the meta data of the credential. Note that the `did` and `kid` need to reference an existing DID and Key Id.
    ///
    ///
    /// - Remark: HTTP `PATCH /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/patch(CredentialsController_patch)`.
    public func CredentialsController_patch(
        path: Operations.CredentialsController_patch.Input.Path,
        headers: Operations.CredentialsController_patch.Input.Headers = .init(),
        body: Operations.CredentialsController_patch.Input.Body
    ) async throws -> Operations.CredentialsController_patch.Output {
        try await CredentialsController_patch(Operations.CredentialsController_patch.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete credential by ID
    ///
    /// Deletes credential by ID stored inside the Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/delete(CredentialsController_remove)`.
    public func CredentialsController_remove(
        path: Operations.CredentialsController_remove.Input.Path,
        headers: Operations.CredentialsController_remove.Input.Headers = .init()
    ) async throws -> Operations.CredentialsController_remove.Output {
        try await CredentialsController_remove(Operations.CredentialsController_remove.Input(
            path: path,
            headers: headers
        ))
    }
    /// Verify credential by ID
    ///
    /// Verifies a verifiable credential by ID that is stored inside the Wallet
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials/{vcId}/verify`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/verify/get(CredentialsController_verify)`.
    public func CredentialsController_verify(
        path: Operations.CredentialsController_verify.Input.Path,
        headers: Operations.CredentialsController_verify.Input.Headers = .init()
    ) async throws -> Operations.CredentialsController_verify.Output {
        try await CredentialsController_verify(Operations.CredentialsController_verify.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Holder wallet dev deployment available only by using internal network.
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://holder-wallet-dev.svx.internal",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/App`.
        public struct App: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/App/component_name`.
            public var component_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/current_api_version`.
            public var current_api_version: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/git_commit`.
            public var git_commit: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/node`.
            public var node: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/npm_config_user_agent`.
            public var npm_config_user_agent: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/npm_lifecycle_event`.
            public var npm_lifecycle_event: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/npm_node_execpath`.
            public var npm_node_execpath: Swift.String
            /// Creates a new `App`.
            ///
            /// - Parameters:
            ///   - component_name:
            ///   - current_api_version:
            ///   - git_commit:
            ///   - node:
            ///   - npm_config_user_agent:
            ///   - npm_lifecycle_event:
            ///   - npm_node_execpath:
            public init(
                component_name: Swift.String,
                current_api_version: Swift.String,
                git_commit: Swift.String,
                node: Swift.String,
                npm_config_user_agent: Swift.String,
                npm_lifecycle_event: Swift.String,
                npm_node_execpath: Swift.String
            ) {
                self.component_name = component_name
                self.current_api_version = current_api_version
                self.git_commit = git_commit
                self.node = node
                self.npm_config_user_agent = npm_config_user_agent
                self.npm_lifecycle_event = npm_lifecycle_event
                self.npm_node_execpath = npm_node_execpath
            }
            public enum CodingKeys: String, CodingKey {
                case component_name
                case current_api_version
                case git_commit
                case node
                case npm_config_user_agent
                case npm_lifecycle_event
                case npm_node_execpath
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppSignal`.
        public struct AppSignal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppSignal/active`.
            public var active: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppSignal/env`.
            public var env: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppSignal/name`.
            public var name: Swift.String
            /// Creates a new `AppSignal`.
            ///
            /// - Parameters:
            ///   - active:
            ///   - env:
            ///   - name:
            public init(
                active: Swift.String,
                env: Swift.String,
                name: Swift.String
            ) {
                self.active = active
                self.env = env
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case active
                case env
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ClaimObject`.
        public struct ClaimObject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ClaimObject/display`.
            public var display: [Components.Schemas.DisplayClaimObject]?
            /// - Remark: Generated from `#/components/schemas/ClaimObject/mandatory`.
            public var mandatory: Swift.Bool?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `ClaimObject`.
            ///
            /// - Parameters:
            ///   - display:
            ///   - mandatory:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                display: [Components.Schemas.DisplayClaimObject]? = nil,
                mandatory: Swift.Bool? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.display = display
                self.mandatory = mandatory
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case display
                case mandatory
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                display = try container.decodeIfPresent(
                    [Components.Schemas.DisplayClaimObject].self,
                    forKey: .display
                )
                mandatory = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .mandatory
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "display",
                    "mandatory"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    display,
                    forKey: .display
                )
                try container.encodeIfPresent(
                    mandatory,
                    forKey: .mandatory
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/Component`.
        public struct Component: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Component/api_version`.
            public var api_version: Swift.String
            /// - Remark: Generated from `#/components/schemas/Component/git_commit`.
            public var git_commit: Swift.String
            /// - Remark: Generated from `#/components/schemas/Component/name`.
            public var name: Swift.String
            /// Creates a new `Component`.
            ///
            /// - Parameters:
            ///   - api_version:
            ///   - git_commit:
            ///   - name:
            public init(
                api_version: Swift.String,
                git_commit: Swift.String,
                name: Swift.String
            ) {
                self.api_version = api_version
                self.git_commit = git_commit
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case api_version
                case git_commit
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateWalletPayloadDto`.
        public struct CreateWalletPayloadDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateWalletPayloadDto/external_reference`.
            public var external_reference: Swift.String?
            /// Creates a new `CreateWalletPayloadDto`.
            ///
            /// - Parameters:
            ///   - external_reference:
            public init(external_reference: Swift.String? = nil) {
                self.external_reference = external_reference
            }
            public enum CodingKeys: String, CodingKey {
                case external_reference
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialDefinition`.
        public struct CredentialDefinition: Codable, Hashable, Sendable {
            /// Object containing a list of name/value pairs, where each name identifies a claim offered in the Credential.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialDefinition/credentialSubject`.
            public struct credentialSubjectPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `credentialSubjectPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Object containing a list of name/value pairs, where each name identifies a claim offered in the Credential.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialDefinition/credentialSubject`.
            public var credentialSubject: Components.Schemas.CredentialDefinition.credentialSubjectPayload?
            /// Array designating the types a certain Credential type supports, according to VC Data Model, Section 4.3.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialDefinition/type`.
            public var _type: [Swift.String]
            /// Creates a new `CredentialDefinition`.
            ///
            /// - Parameters:
            ///   - credentialSubject: Object containing a list of name/value pairs, where each name identifies a claim offered in the Credential.
            ///   - _type: Array designating the types a certain Credential type supports, according to VC Data Model, Section 4.3.
            public init(
                credentialSubject: Components.Schemas.CredentialDefinition.credentialSubjectPayload? = nil,
                _type: [Swift.String]
            ) {
                self.credentialSubject = credentialSubject
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case credentialSubject
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialImportRequestModelDto`.
        public struct CredentialImportRequestModelDto: Codable, Hashable, Sendable {
            /// The encoded string representation of the credential to be imported.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialImportRequestModelDto/credential`.
            public var credential: Swift.String
            /// Additional information about the credential to be imported.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialImportRequestModelDto/meta`.
            public struct metaPayload: Codable, Hashable, Sendable {
                /// A DID managed by the wallet used to perform credential key binding.
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialImportRequestModelDto/meta/did`.
                public var did: Swift.String?
                /// An ID for a key managed by the wallet used to perform credential key binding.
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialImportRequestModelDto/meta/kid`.
                public var kid: Swift.String?
                /// Creates a new `metaPayload`.
                ///
                /// - Parameters:
                ///   - did: A DID managed by the wallet used to perform credential key binding.
                ///   - kid: An ID for a key managed by the wallet used to perform credential key binding.
                public init(
                    did: Swift.String? = nil,
                    kid: Swift.String? = nil
                ) {
                    self.did = did
                    self.kid = kid
                }
                public enum CodingKeys: String, CodingKey {
                    case did
                    case kid
                }
            }
            /// Additional information about the credential to be imported.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialImportRequestModelDto/meta`.
            public var meta: Components.Schemas.CredentialImportRequestModelDto.metaPayload?
            /// Creates a new `CredentialImportRequestModelDto`.
            ///
            /// - Parameters:
            ///   - credential: The encoded string representation of the credential to be imported.
            ///   - meta: Additional information about the credential to be imported.
            public init(
                credential: Swift.String,
                meta: Components.Schemas.CredentialImportRequestModelDto.metaPayload? = nil
            ) {
                self.credential = credential
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case credential
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialNotFoundError`.
        public struct CredentialNotFoundError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialNotFoundError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case credential_not_found = "credential_not_found"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialNotFoundError/error`.
            public var error: Components.Schemas.CredentialNotFoundError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialNotFoundError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialNotFoundError/message`.
            public var message: Swift.String
            /// Creates a new `CredentialNotFoundError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.CredentialNotFoundError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialOfferDto`.
        public struct CredentialOfferDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialOfferDto/credential_issuer`.
            public var credential_issuer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialOfferDto/credentials`.
            public var credentials: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CredentialOfferDto/grants`.
            public var grants: Components.Schemas.GrantDto?
            /// Creates a new `CredentialOfferDto`.
            ///
            /// - Parameters:
            ///   - credential_issuer:
            ///   - credentials:
            ///   - grants:
            public init(
                credential_issuer: Swift.String? = nil,
                credentials: [Swift.String]? = nil,
                grants: Components.Schemas.GrantDto? = nil
            ) {
                self.credential_issuer = credential_issuer
                self.credentials = credentials
                self.grants = grants
            }
            public enum CodingKeys: String, CodingKey {
                case credential_issuer
                case credentials
                case grants
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialPatchRequestModelDto`.
        public struct CredentialPatchRequestModelDto: Codable, Hashable, Sendable {
            /// Additional information about the credential to be imported.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialPatchRequestModelDto/meta`.
            public struct metaPayload: Codable, Hashable, Sendable {
                /// A DID managed by the wallet used to perform credential key binding.
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialPatchRequestModelDto/meta/did`.
                public var did: Swift.String?
                /// An ID for a key managed by the wallet used to perform credential key binding.
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialPatchRequestModelDto/meta/kid`.
                public var kid: Swift.String?
                /// Creates a new `metaPayload`.
                ///
                /// - Parameters:
                ///   - did: A DID managed by the wallet used to perform credential key binding.
                ///   - kid: An ID for a key managed by the wallet used to perform credential key binding.
                public init(
                    did: Swift.String? = nil,
                    kid: Swift.String? = nil
                ) {
                    self.did = did
                    self.kid = kid
                }
                public enum CodingKeys: String, CodingKey {
                    case did
                    case kid
                }
            }
            /// Additional information about the credential to be imported.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialPatchRequestModelDto/meta`.
            public var meta: Components.Schemas.CredentialPatchRequestModelDto.metaPayload?
            /// Creates a new `CredentialPatchRequestModelDto`.
            ///
            /// - Parameters:
            ///   - meta: Additional information about the credential to be imported.
            public init(meta: Components.Schemas.CredentialPatchRequestModelDto.metaPayload? = nil) {
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto`.
        public struct CredentialReceiveGetAccessTokenRequestModelDto: Codable, Hashable, Sendable {
            /// code claimed via authorization code flow. It can to be exchanged for the access token.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_code`.
            public var authorization_code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload`.
            public struct authorization_detailsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition`.
                @frozen public enum credential_definitionPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition/case1/vct`.
                        public var vct: Swift.String?
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - vct:
                        public init(vct: Swift.String? = nil) {
                            self.vct = vct
                        }
                        public enum CodingKeys: String, CodingKey {
                            case vct
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition/case1`.
                    case case1(Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload.credential_definitionPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition/case2/type`.
                        public var _type: [Swift.String]?
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        public init(_type: [Swift.String]? = nil) {
                            self._type = _type
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition/case2`.
                    case case2(Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload.credential_definitionPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/credential_definition`.
                public var credential_definition: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload.credential_definitionPayload?
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/format`.
                @frozen public enum formatPayload: String, Codable, Hashable, Sendable {
                    case vc_plus_sd_hyphen_jwt = "vc+sd-jwt"
                    case jwt_vc_json = "jwt_vc_json"
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/format`.
                public var format: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload.formatPayload
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case openid_credential = "openid_credential"
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_detailsPayload/type`.
                public var _type: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload._typePayload
                /// Creates a new `authorization_detailsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - credential_definition:
                ///   - format:
                ///   - _type:
                public init(
                    credential_definition: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload.credential_definitionPayload? = nil,
                    format: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload.formatPayload,
                    _type: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload._typePayload
                ) {
                    self.credential_definition = credential_definition
                    self.format = format
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case credential_definition
                    case format
                    case _type = "type"
                }
            }
            /// Contains details about the credentials the Wallet wants to obtain.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_details`.
            public typealias authorization_detailsPayload = [Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayloadPayload]
            /// Contains details about the credentials the Wallet wants to obtain.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/authorization_details`.
            public var authorization_details: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayload?
            /// Client identifier in OAuth 2.0
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/client_secret`.
            public var client_secret: Swift.String?
            /// Part of PKCE, used when calling the authorization endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/code_challenge`.
            public var code_challenge: Swift.String?
            /// Part of PKCE, used when calling the authorization endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/code_challenge_method`.
            public var code_challenge_method: Swift.String?
            /// Part of PKCE, used when calling the token endpoint, together with the authorization code
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/code_verifier`.
            public var code_verifier: Swift.String?
            /// The URL of the Credential Issuer from which the Wallet is requested to obtain one or more Credentials. The authorization server is determined based on the Credential Issuer Metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/credential_issuer`.
            public var credential_issuer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/grant_type`.
            @frozen public enum grant_typePayload: String, Codable, Hashable, Sendable {
                case authorization_code = "authorization_code"
                case urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_code = "urn:ietf:params:oauth:grant-type:pre-authorized_code"
            }
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/grant_type`.
            public var grant_type: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.grant_typePayload?
            /// String value identifying a certain processing context at the Credential Issuer. This value is typically provided in the credential offer. When it is, the Wallet MUST send the value back to the Credential Issuer.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/issuer_state`.
            public var issuer_state: Swift.String?
            /// The code representing the authorization to obtain Credentials of a certain type. This parameter MUST be present if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code. Typically provided by the Credential Issuer in the credential offer.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/pre-authorized_code`.
            public var pre_hyphen_authorized_code: Swift.String?
            /// Only relevant when the grant_type is authorization_code.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/redirect_uri`.
            public var redirect_uri: Swift.String?
            /// Request credentials using OAuth 2.0 scope parameter
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/scope`.
            public var scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/state`.
            public var state: Swift.String?
            /// String value containing a Transaction Code. This value MUST be present if a tx_code object was present in the Credential Offer (including if the object was empty).  This parameter MUST only be used if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenRequestModelDto/tx_code`.
            public var tx_code: Swift.String?
            /// Creates a new `CredentialReceiveGetAccessTokenRequestModelDto`.
            ///
            /// - Parameters:
            ///   - authorization_code: code claimed via authorization code flow. It can to be exchanged for the access token.
            ///   - authorization_details: Contains details about the credentials the Wallet wants to obtain.
            ///   - client_id: Client identifier in OAuth 2.0
            ///   - client_secret:
            ///   - code_challenge: Part of PKCE, used when calling the authorization endpoint.
            ///   - code_challenge_method: Part of PKCE, used when calling the authorization endpoint.
            ///   - code_verifier: Part of PKCE, used when calling the token endpoint, together with the authorization code
            ///   - credential_issuer: The URL of the Credential Issuer from which the Wallet is requested to obtain one or more Credentials. The authorization server is determined based on the Credential Issuer Metadata.
            ///   - grant_type:
            ///   - issuer_state: String value identifying a certain processing context at the Credential Issuer. This value is typically provided in the credential offer. When it is, the Wallet MUST send the value back to the Credential Issuer.
            ///   - pre_hyphen_authorized_code: The code representing the authorization to obtain Credentials of a certain type. This parameter MUST be present if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code. Typically provided by the Credential Issuer in the credential offer.
            ///   - redirect_uri: Only relevant when the grant_type is authorization_code.
            ///   - scope: Request credentials using OAuth 2.0 scope parameter
            ///   - state:
            ///   - tx_code: String value containing a Transaction Code. This value MUST be present if a tx_code object was present in the Credential Offer (including if the object was empty).  This parameter MUST only be used if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code.
            public init(
                authorization_code: Swift.String? = nil,
                authorization_details: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.authorization_detailsPayload? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                code_challenge: Swift.String? = nil,
                code_challenge_method: Swift.String? = nil,
                code_verifier: Swift.String? = nil,
                credential_issuer: Swift.String? = nil,
                grant_type: Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto.grant_typePayload? = nil,
                issuer_state: Swift.String? = nil,
                pre_hyphen_authorized_code: Swift.String? = nil,
                redirect_uri: Swift.String? = nil,
                scope: Swift.String? = nil,
                state: Swift.String? = nil,
                tx_code: Swift.String? = nil
            ) {
                self.authorization_code = authorization_code
                self.authorization_details = authorization_details
                self.client_id = client_id
                self.client_secret = client_secret
                self.code_challenge = code_challenge
                self.code_challenge_method = code_challenge_method
                self.code_verifier = code_verifier
                self.credential_issuer = credential_issuer
                self.grant_type = grant_type
                self.issuer_state = issuer_state
                self.pre_hyphen_authorized_code = pre_hyphen_authorized_code
                self.redirect_uri = redirect_uri
                self.scope = scope
                self.state = state
                self.tx_code = tx_code
            }
            public enum CodingKeys: String, CodingKey {
                case authorization_code
                case authorization_details
                case client_id
                case client_secret
                case code_challenge
                case code_challenge_method
                case code_verifier
                case credential_issuer
                case grant_type
                case issuer_state
                case pre_hyphen_authorized_code = "pre-authorized_code"
                case redirect_uri
                case scope
                case state
                case tx_code
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto`.
        public struct CredentialReceiveGetAccessTokenResponseModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/access_token`.
            public var access_token: Swift.String?
            /// The URL to open in a browser in order to complete the authorization with the Authorization Server.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/authorization_url`.
            public var authorization_url: Swift.String?
            /// String containing a nonce to be used to create a proof of possession of key material when requesting a Credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/c_nonce`.
            public var c_nonce: Swift.String?
            /// Number denoting the lifetime in seconds of the c_nonce.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/c_nonce_expires_in`.
            public var c_nonce_expires_in: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition`.
            @frozen public enum credential_definitionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition/case1`.
                public struct Case1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition/case1/vct`.
                    public var vct: Swift.String?
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - vct:
                    public init(vct: Swift.String? = nil) {
                        self.vct = vct
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vct
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition/case1`.
                case case1(Components.Schemas.CredentialReceiveGetAccessTokenResponseModelDto.credential_definitionPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition/case2/type`.
                    public var _type: [Swift.String]?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    public init(_type: [Swift.String]? = nil) {
                        self._type = _type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition/case2`.
                case case2(Components.Schemas.CredentialReceiveGetAccessTokenResponseModelDto.credential_definitionPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/credential_definition`.
            public var credential_definition: Components.Schemas.CredentialReceiveGetAccessTokenResponseModelDto.credential_definitionPayload?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/refresh_token`.
            public var refresh_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetAccessTokenResponseModelDto/state`.
            public var state: Swift.String?
            /// Creates a new `CredentialReceiveGetAccessTokenResponseModelDto`.
            ///
            /// - Parameters:
            ///   - access_token:
            ///   - authorization_url: The URL to open in a browser in order to complete the authorization with the Authorization Server.
            ///   - c_nonce: String containing a nonce to be used to create a proof of possession of key material when requesting a Credential
            ///   - c_nonce_expires_in: Number denoting the lifetime in seconds of the c_nonce.
            ///   - credential_definition:
            ///   - refresh_token:
            ///   - state:
            public init(
                access_token: Swift.String? = nil,
                authorization_url: Swift.String? = nil,
                c_nonce: Swift.String? = nil,
                c_nonce_expires_in: Swift.Int? = nil,
                credential_definition: Components.Schemas.CredentialReceiveGetAccessTokenResponseModelDto.credential_definitionPayload? = nil,
                refresh_token: Swift.String? = nil,
                state: Swift.String? = nil
            ) {
                self.access_token = access_token
                self.authorization_url = authorization_url
                self.c_nonce = c_nonce
                self.c_nonce_expires_in = c_nonce_expires_in
                self.credential_definition = credential_definition
                self.refresh_token = refresh_token
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case access_token
                case authorization_url
                case c_nonce
                case c_nonce_expires_in
                case credential_definition
                case refresh_token
                case state
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto`.
        public struct CredentialReceiveGetCredentialRequestModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/access_token`.
            public var access_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition`.
            @frozen public enum credential_definitionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition/case1`.
                public struct Case1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition/case1/vct`.
                    public var vct: Swift.String?
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - vct:
                    public init(vct: Swift.String? = nil) {
                        self.vct = vct
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vct
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition/case1`.
                case case1(Components.Schemas.CredentialReceiveGetCredentialRequestModelDto.credential_definitionPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition/case2/type`.
                    public var _type: [Swift.String]?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    public init(_type: [Swift.String]? = nil) {
                        self._type = _type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition/case2`.
                case case2(Components.Schemas.CredentialReceiveGetCredentialRequestModelDto.credential_definitionPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/credential_definition`.
            public var credential_definition: Components.Schemas.CredentialReceiveGetCredentialRequestModelDto.credential_definitionPayload?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/did`.
            public var did: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/format`.
            @frozen public enum formatPayload: String, Codable, Hashable, Sendable {
                case vc_plus_sd_hyphen_jwt = "vc+sd-jwt"
                case jwt_vc_json = "jwt_vc_json"
            }
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/format`.
            public var format: Components.Schemas.CredentialReceiveGetCredentialRequestModelDto.formatPayload?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/kid`.
            public var kid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/state`.
            public var state: Swift.String?
            /// A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialRequestModelDto/transaction_id`.
            public var transaction_id: Swift.String?
            /// Creates a new `CredentialReceiveGetCredentialRequestModelDto`.
            ///
            /// - Parameters:
            ///   - access_token:
            ///   - credential_definition:
            ///   - did:
            ///   - format:
            ///   - kid:
            ///   - state:
            ///   - transaction_id: A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential
            public init(
                access_token: Swift.String? = nil,
                credential_definition: Components.Schemas.CredentialReceiveGetCredentialRequestModelDto.credential_definitionPayload? = nil,
                did: Swift.String? = nil,
                format: Components.Schemas.CredentialReceiveGetCredentialRequestModelDto.formatPayload? = nil,
                kid: Swift.String? = nil,
                state: Swift.String? = nil,
                transaction_id: Swift.String? = nil
            ) {
                self.access_token = access_token
                self.credential_definition = credential_definition
                self.did = did
                self.format = format
                self.kid = kid
                self.state = state
                self.transaction_id = transaction_id
            }
            public enum CodingKeys: String, CodingKey {
                case access_token
                case credential_definition
                case did
                case format
                case kid
                case state
                case transaction_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialResponseModelDto`.
        public struct CredentialReceiveGetCredentialResponseModelDto: Codable, Hashable, Sendable {
            /// String containing a nonce to be used to create a proof of possession of key material when requesting a Credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialResponseModelDto/c_nonce`.
            public var c_nonce: Swift.String?
            /// Number denoting the lifetime in seconds of the c_nonce.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialResponseModelDto/c_nonce_expires_in`.
            public var c_nonce_expires_in: Swift.Int?
            /// Contains issued Credential. MUST be present when transaction_id is not returned. MAY be a string or an object, depending on the Credential format. See Appendix E for the Credential format specific encoding requirements.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialResponseModelDto/credential`.
            public var credential: Swift.String?
            /// Id under which the credential is stored in the wallet
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialResponseModelDto/credential_id`.
            public var credential_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialResponseModelDto/state`.
            public var state: Swift.String
            /// A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveGetCredentialResponseModelDto/transaction_id`.
            public var transaction_id: Swift.String?
            /// Creates a new `CredentialReceiveGetCredentialResponseModelDto`.
            ///
            /// - Parameters:
            ///   - c_nonce: String containing a nonce to be used to create a proof of possession of key material when requesting a Credential
            ///   - c_nonce_expires_in: Number denoting the lifetime in seconds of the c_nonce.
            ///   - credential: Contains issued Credential. MUST be present when transaction_id is not returned. MAY be a string or an object, depending on the Credential format. See Appendix E for the Credential format specific encoding requirements.
            ///   - credential_id: Id under which the credential is stored in the wallet
            ///   - state:
            ///   - transaction_id: A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential
            public init(
                c_nonce: Swift.String? = nil,
                c_nonce_expires_in: Swift.Int? = nil,
                credential: Swift.String? = nil,
                credential_id: Swift.String? = nil,
                state: Swift.String,
                transaction_id: Swift.String? = nil
            ) {
                self.c_nonce = c_nonce
                self.c_nonce_expires_in = c_nonce_expires_in
                self.credential = credential
                self.credential_id = credential_id
                self.state = state
                self.transaction_id = transaction_id
            }
            public enum CodingKeys: String, CodingKey {
                case c_nonce
                case c_nonce_expires_in
                case credential
                case credential_id
                case state
                case transaction_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveRequestModelDto`.
        public struct CredentialReceiveRequestModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveRequestModelDto/credential_offer`.
            public var credential_offer: Components.Schemas.CredentialOfferDto?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveRequestModelDto/credential_offer_uri`.
            public var credential_offer_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveRequestModelDto/credential_offer_endpoint`.
            public var credential_offer_endpoint: Swift.String?
            /// Creates a new `CredentialReceiveRequestModelDto`.
            ///
            /// - Parameters:
            ///   - credential_offer:
            ///   - credential_offer_uri:
            ///   - credential_offer_endpoint:
            public init(
                credential_offer: Components.Schemas.CredentialOfferDto? = nil,
                credential_offer_uri: Swift.String? = nil,
                credential_offer_endpoint: Swift.String? = nil
            ) {
                self.credential_offer = credential_offer
                self.credential_offer_uri = credential_offer_uri
                self.credential_offer_endpoint = credential_offer_endpoint
            }
            public enum CodingKeys: String, CodingKey {
                case credential_offer
                case credential_offer_uri
                case credential_offer_endpoint
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveResponseModelDto`.
        public struct CredentialReceiveResponseModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveResponseModelDto/credential_offer`.
            public var credential_offer: Components.Schemas.CredentialOfferDto?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveResponseModelDto/credential_offer_uri`.
            public var credential_offer_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveResponseModelDto/state`.
            public var state: Swift.String?
            /// Creates a new `CredentialReceiveResponseModelDto`.
            ///
            /// - Parameters:
            ///   - credential_offer:
            ///   - credential_offer_uri:
            ///   - state:
            public init(
                credential_offer: Components.Schemas.CredentialOfferDto? = nil,
                credential_offer_uri: Swift.String? = nil,
                state: Swift.String? = nil
            ) {
                self.credential_offer = credential_offer
                self.credential_offer_uri = credential_offer_uri
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case credential_offer
                case credential_offer_uri
                case state
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveStatesModelDto`.
        public struct CredentialReceiveStatesModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStatesModelDto/issuance_states`.
            public var issuance_states: [Components.Schemas.CredentialReceiveStateModelDto]?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStatesModelDto/meta`.
            public var meta: Components.Schemas.Meta
            /// Creates a new `CredentialReceiveStatesModelDto`.
            ///
            /// - Parameters:
            ///   - issuance_states:
            ///   - meta:
            public init(
                issuance_states: [Components.Schemas.CredentialReceiveStateModelDto]? = nil,
                meta: Components.Schemas.Meta
            ) {
                self.issuance_states = issuance_states
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case issuance_states
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto`.
        public struct CredentialReceiveStateModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/access_token`.
            public var access_token: Swift.String?
            /// The URL to open in a browser in order to complete the authorization with the Authorization Server.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/authorization_url`.
            public var authorization_url: Swift.String?
            /// String containing a nonce to be used to create a proof of possession of key material when requesting a Credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/c_nonce`.
            public var c_nonce: Swift.String?
            /// Number denoting the lifetime in seconds of the c_nonce.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/c_nonce_expires_in`.
            public var c_nonce_expires_in: Swift.Int?
            /// Contains issued Credential. MUST be present when transaction_id is not returned. MAY be a string or an object, depending on the Credential format. See Appendix E for the Credential format specific encoding requirements.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential`.
            public var credential: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition`.
            @frozen public enum credential_definitionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition/case1`.
                public struct Case1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition/case1/vct`.
                    public var vct: Swift.String?
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - vct:
                    public init(vct: Swift.String? = nil) {
                        self.vct = vct
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vct
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition/case1`.
                case case1(Components.Schemas.CredentialReceiveStateModelDto.credential_definitionPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition/case2/type`.
                    public var _type: [Swift.String]?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    public init(_type: [Swift.String]? = nil) {
                        self._type = _type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition/case2`.
                case case2(Components.Schemas.CredentialReceiveStateModelDto.credential_definitionPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_definition`.
            public var credential_definition: Components.Schemas.CredentialReceiveStateModelDto.credential_definitionPayload?
            /// Id under which the credential is stored in the wallet
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_id`.
            public var credential_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_offer`.
            public var credential_offer: Components.Schemas.CredentialOfferDto?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/credential_offer_uri`.
            public var credential_offer_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/did`.
            public var did: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/format`.
            @frozen public enum formatPayload: String, Codable, Hashable, Sendable {
                case vc_plus_sd_hyphen_jwt = "vc+sd-jwt"
                case jwt_vc_json = "jwt_vc_json"
            }
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/format`.
            public var format: Components.Schemas.CredentialReceiveStateModelDto.formatPayload?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/kid`.
            public var kid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/refresh_token`.
            public var refresh_token: Swift.String?
            /// This value is always `code`
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/response_type`.
            @frozen public enum response_typePayload: String, Codable, Hashable, Sendable {
                case code = "code"
            }
            /// This value is always `code`
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/response_type`.
            public var response_type: Components.Schemas.CredentialReceiveStateModelDto.response_typePayload?
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/state`.
            public var state: Swift.String?
            /// A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialReceiveStateModelDto/transaction_id`.
            public var transaction_id: Swift.String?
            /// Creates a new `CredentialReceiveStateModelDto`.
            ///
            /// - Parameters:
            ///   - access_token:
            ///   - authorization_url: The URL to open in a browser in order to complete the authorization with the Authorization Server.
            ///   - c_nonce: String containing a nonce to be used to create a proof of possession of key material when requesting a Credential
            ///   - c_nonce_expires_in: Number denoting the lifetime in seconds of the c_nonce.
            ///   - credential: Contains issued Credential. MUST be present when transaction_id is not returned. MAY be a string or an object, depending on the Credential format. See Appendix E for the Credential format specific encoding requirements.
            ///   - credential_definition:
            ///   - credential_id: Id under which the credential is stored in the wallet
            ///   - credential_offer:
            ///   - credential_offer_uri:
            ///   - did:
            ///   - format:
            ///   - kid:
            ///   - refresh_token:
            ///   - response_type: This value is always `code`
            ///   - state:
            ///   - transaction_id: A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential
            public init(
                access_token: Swift.String? = nil,
                authorization_url: Swift.String? = nil,
                c_nonce: Swift.String? = nil,
                c_nonce_expires_in: Swift.Int? = nil,
                credential: Swift.String? = nil,
                credential_definition: Components.Schemas.CredentialReceiveStateModelDto.credential_definitionPayload? = nil,
                credential_id: Swift.String? = nil,
                credential_offer: Components.Schemas.CredentialOfferDto? = nil,
                credential_offer_uri: Swift.String? = nil,
                did: Swift.String? = nil,
                format: Components.Schemas.CredentialReceiveStateModelDto.formatPayload? = nil,
                kid: Swift.String? = nil,
                refresh_token: Swift.String? = nil,
                response_type: Components.Schemas.CredentialReceiveStateModelDto.response_typePayload? = nil,
                state: Swift.String? = nil,
                transaction_id: Swift.String? = nil
            ) {
                self.access_token = access_token
                self.authorization_url = authorization_url
                self.c_nonce = c_nonce
                self.c_nonce_expires_in = c_nonce_expires_in
                self.credential = credential
                self.credential_definition = credential_definition
                self.credential_id = credential_id
                self.credential_offer = credential_offer
                self.credential_offer_uri = credential_offer_uri
                self.did = did
                self.format = format
                self.kid = kid
                self.refresh_token = refresh_token
                self.response_type = response_type
                self.state = state
                self.transaction_id = transaction_id
            }
            public enum CodingKeys: String, CodingKey {
                case access_token
                case authorization_url
                case c_nonce
                case c_nonce_expires_in
                case credential
                case credential_definition
                case credential_id
                case credential_offer
                case credential_offer_uri
                case did
                case format
                case kid
                case refresh_token
                case response_type
                case state
                case transaction_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialResponseDto`.
        public struct CredentialResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialResponseDto/credential`.
            public var credential: Components.Schemas.CredentialResponseModelDto
            /// Creates a new `CredentialResponseDto`.
            ///
            /// - Parameters:
            ///   - credential:
            public init(credential: Components.Schemas.CredentialResponseModelDto) {
                self.credential = credential
            }
            public enum CodingKeys: String, CodingKey {
                case credential
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto`.
        public struct CredentialResponseModelDto: Codable, Hashable, Sendable {
            /// The date and time when the credential was added to a Wallet.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/created_at`.
            public var created_at: Foundation.Date?
            /// The encoded string representation of the credential.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/credential`.
            public var credential: Swift.String
            /// Format of the credential.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/format`.
            @frozen public enum formatPayload: String, Codable, Hashable, Sendable {
                case vc_plus_sd_hyphen_jwt = "vc+sd-jwt"
                case jwt_vc_json = "jwt_vc_json"
            }
            /// Format of the credential.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/format`.
            public var format: Components.Schemas.CredentialResponseModelDto.formatPayload
            /// A unique identifier of the credential.
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta`.
            public struct metaPayload: Codable, Hashable, Sendable {
                /// Object containing a list of name/value pairs. Each pair is a claim about the subject in the credential.
                ///
                /// Snapshot from Credential Issuer Metadata taken at the time of issuance.
                /// See Appendix A.2.2 in OpenID for Verifiable Credential Issuance for more information.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta/claims`.
                public var claims: Components.Schemas.ClaimObject?
                /// Object containing the detailed description of the credential type of the W3C VC Data Model.
                ///
                /// Snapshot from Credential Issuer Metadata taken at the time of issuance.
                /// See Appendix A.1.1.2 in OpenID for Verifiable Credential Issuance for more information.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta/credential_definition`.
                public var credential_definition: Components.Schemas.CredentialDefinition?
                /// A DID managed by the wallet used to perform credential key binding.
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta/did`.
                public var did: Swift.String?
                /// Array of objects, where each object contains information on how to display the credential.
                ///
                /// Snapshot from Credential Issuer Metadata taken at the time of issuance.
                /// See section 11.2.3 in OpenID for Verifiable Credential Issuance for more information.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta/display`.
                public var display: Components.Schemas.DisplayObject?
                /// An ID for a key managed by the wallet used to perform credential key binding.
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta/kid`.
                public var kid: Swift.String?
                /// The Credential type of the SD-JWT VC.
                ///
                /// Snapshot from Credential Issuer Metadata taken at the time of issuance.
                /// See Appendix A.2.2 in OpenID for Verifiable Credential Issuance for more information.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta/vct`.
                public var vct: Swift.String?
                /// Creates a new `metaPayload`.
                ///
                /// - Parameters:
                ///   - claims: Object containing a list of name/value pairs. Each pair is a claim about the subject in the credential.
                ///   - credential_definition: Object containing the detailed description of the credential type of the W3C VC Data Model.
                ///   - did: A DID managed by the wallet used to perform credential key binding.
                ///   - display: Array of objects, where each object contains information on how to display the credential.
                ///   - kid: An ID for a key managed by the wallet used to perform credential key binding.
                ///   - vct: The Credential type of the SD-JWT VC.
                public init(
                    claims: Components.Schemas.ClaimObject? = nil,
                    credential_definition: Components.Schemas.CredentialDefinition? = nil,
                    did: Swift.String? = nil,
                    display: Components.Schemas.DisplayObject? = nil,
                    kid: Swift.String? = nil,
                    vct: Swift.String? = nil
                ) {
                    self.claims = claims
                    self.credential_definition = credential_definition
                    self.did = did
                    self.display = display
                    self.kid = kid
                    self.vct = vct
                }
                public enum CodingKeys: String, CodingKey {
                    case claims
                    case credential_definition
                    case did
                    case display
                    case kid
                    case vct
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialResponseModelDto/meta`.
            public var meta: Components.Schemas.CredentialResponseModelDto.metaPayload?
            /// Creates a new `CredentialResponseModelDto`.
            ///
            /// - Parameters:
            ///   - created_at: The date and time when the credential was added to a Wallet.
            ///   - credential: The encoded string representation of the credential.
            ///   - format: Format of the credential.
            ///   - id: A unique identifier of the credential.
            ///   - meta:
            public init(
                created_at: Foundation.Date? = nil,
                credential: Swift.String,
                format: Components.Schemas.CredentialResponseModelDto.formatPayload,
                id: Swift.String,
                meta: Components.Schemas.CredentialResponseModelDto.metaPayload? = nil
            ) {
                self.created_at = created_at
                self.credential = credential
                self.format = format
                self.id = id
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case created_at
                case credential
                case format
                case id
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialVerificationCheckModelDto`.
        public struct CredentialVerificationCheckModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationCheckModelDto/error`.
            public var error: Swift.String
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationCheckModelDto/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationCheckModelDto/message`.
            public var message: Swift.String
            /// Creates a new `CredentialVerificationCheckModelDto`.
            ///
            /// - Parameters:
            ///   - error:
            ///   - extra_info:
            ///   - message:
            public init(
                error: Swift.String,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialVerificationResponseDto`.
        public struct CredentialVerificationResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationResponseDto/checks`.
            @frozen public enum checksPayload: String, Codable, Hashable, Sendable {
                case format = "format"
                case signature = "signature"
                case expiration = "expiration"
                case nonce = "nonce"
                case schema = "schema"
                case revocation_status = "revocation_status"
            }
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationResponseDto/checks`.
            public var checks: Components.Schemas.CredentialVerificationResponseDto.checksPayload
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationResponseDto/errors`.
            public var errors: Components.Schemas.CredentialVerificationCheckModelDto
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationResponseDto/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CredentialVerificationResponseDto/warnings`.
            public var warnings: Components.Schemas.CredentialVerificationCheckModelDto
            /// Creates a new `CredentialVerificationResponseDto`.
            ///
            /// - Parameters:
            ///   - checks:
            ///   - errors:
            ///   - id:
            ///   - warnings:
            public init(
                checks: Components.Schemas.CredentialVerificationResponseDto.checksPayload,
                errors: Components.Schemas.CredentialVerificationCheckModelDto,
                id: Swift.String,
                warnings: Components.Schemas.CredentialVerificationCheckModelDto
            ) {
                self.checks = checks
                self.errors = errors
                self.id = id
                self.warnings = warnings
            }
            public enum CodingKeys: String, CodingKey {
                case checks
                case errors
                case id
                case warnings
            }
        }
        /// - Remark: Generated from `#/components/schemas/CredentialsResponseDto`.
        public struct CredentialsResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialsResponseDto/credentials`.
            public var credentials: [Components.Schemas.CredentialResponseModelDto]
            /// - Remark: Generated from `#/components/schemas/CredentialsResponseDto/meta`.
            public var meta: OpenAPIRuntime.OpenAPIObjectContainer
            /// - Remark: Generated from `#/components/schemas/CredentialsResponseDto/next_page_after`.
            public var next_page_after: Swift.String
            /// Creates a new `CredentialsResponseDto`.
            ///
            /// - Parameters:
            ///   - credentials:
            ///   - meta:
            ///   - next_page_after:
            public init(
                credentials: [Components.Schemas.CredentialResponseModelDto],
                meta: OpenAPIRuntime.OpenAPIObjectContainer,
                next_page_after: Swift.String
            ) {
                self.credentials = credentials
                self.meta = meta
                self.next_page_after = next_page_after
            }
            public enum CodingKeys: String, CodingKey {
                case credentials
                case meta
                case next_page_after
            }
        }
        /// - Remark: Generated from `#/components/schemas/Database`.
        public struct Database: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Database/host`.
            public var host: Swift.String
            /// - Remark: Generated from `#/components/schemas/Database/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Database/port`.
            public var port: Swift.String
            /// - Remark: Generated from `#/components/schemas/Database/user`.
            public var user: Swift.String
            /// Creates a new `Database`.
            ///
            /// - Parameters:
            ///   - host:
            ///   - name:
            ///   - port:
            ///   - user:
            public init(
                host: Swift.String,
                name: Swift.String,
                port: Swift.String,
                user: Swift.String
            ) {
                self.host = host
                self.name = name
                self.port = port
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case host
                case name
                case port
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteCredentialError`.
        public struct DeleteCredentialError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteCredentialError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case delete_credential_error = "delete_credential_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteCredentialError/error`.
            public var error: Components.Schemas.DeleteCredentialError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteCredentialError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteCredentialError/message`.
            public var message: Swift.String
            /// Creates a new `DeleteCredentialError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.DeleteCredentialError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteWalletError`.
        public struct DeleteWalletError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteWalletError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case delete_wallet_error = "delete_wallet_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteWalletError/error`.
            public var error: Components.Schemas.DeleteWalletError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteWalletError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteWalletError/message`.
            public var message: Swift.String
            /// Creates a new `DeleteWalletError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.DeleteWalletError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/DidNotFoundError`.
        public struct DidNotFoundError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/DidNotFoundError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case did_not_found = "did_not_found"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/DidNotFoundError/error`.
            public var error: Components.Schemas.DidNotFoundError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/DidNotFoundError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/DidNotFoundError/message`.
            public var message: Swift.String
            /// Creates a new `DidNotFoundError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.DidNotFoundError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/DisplayClaimObject`.
        public struct DisplayClaimObject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DisplayClaimObject/locale`.
            public var locale: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisplayClaimObject/name`.
            public var name: Swift.String?
            /// Creates a new `DisplayClaimObject`.
            ///
            /// - Parameters:
            ///   - locale:
            ///   - name:
            public init(
                locale: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.locale = locale
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case locale
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/DisplayObject`.
        public struct DisplayObject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DisplayObject/background_color`.
            public var background_color: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisplayObject/locale`.
            public var locale: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisplayObject/logo`.
            public struct logoPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DisplayObject/logo/alt_text`.
                public var alt_text: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DisplayObject/logo/url`.
                public var url: Swift.String?
                /// Creates a new `logoPayload`.
                ///
                /// - Parameters:
                ///   - alt_text:
                ///   - url:
                public init(
                    alt_text: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.alt_text = alt_text
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case alt_text
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/DisplayObject/logo`.
            public var logo: Components.Schemas.DisplayObject.logoPayload?
            /// - Remark: Generated from `#/components/schemas/DisplayObject/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisplayObject/text_color`.
            public var text_color: Swift.String?
            /// Creates a new `DisplayObject`.
            ///
            /// - Parameters:
            ///   - background_color:
            ///   - locale:
            ///   - logo:
            ///   - name:
            ///   - text_color:
            public init(
                background_color: Swift.String? = nil,
                locale: Swift.String? = nil,
                logo: Components.Schemas.DisplayObject.logoPayload? = nil,
                name: Swift.String? = nil,
                text_color: Swift.String? = nil
            ) {
                self.background_color = background_color
                self.locale = locale
                self.logo = logo
                self.name = name
                self.text_color = text_color
            }
            public enum CodingKeys: String, CodingKey {
                case background_color
                case locale
                case logo
                case name
                case text_color
            }
        }
        /// - Remark: Generated from `#/components/schemas/GrantDto`.
        public struct GrantDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GrantDto/authorization_code`.
            public struct authorization_codePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GrantDto/authorization_code/issuer_state`.
                public var issuer_state: Swift.String?
                /// Creates a new `authorization_codePayload`.
                ///
                /// - Parameters:
                ///   - issuer_state:
                public init(issuer_state: Swift.String? = nil) {
                    self.issuer_state = issuer_state
                }
                public enum CodingKeys: String, CodingKey {
                    case issuer_state
                }
            }
            /// - Remark: Generated from `#/components/schemas/GrantDto/authorization_code`.
            public var authorization_code: Components.Schemas.GrantDto.authorization_codePayload?
            /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code`.
            public struct urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code/pre_authorized_code`.
                public var pre_authorized_code: Swift.String?
                /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code/tx_code`.
                public struct tx_codePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code/tx_code/input_mode`.
                    @frozen public enum input_modePayload: String, Codable, Hashable, Sendable {
                        case numeric = "numeric"
                        case text = "text"
                    }
                    /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code/tx_code/input_mode`.
                    public var input_mode: Components.Schemas.GrantDto.urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload.tx_codePayload.input_modePayload?
                    /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code/tx_code/length`.
                    public var length: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code/tx_code/description`.
                    public var description: Swift.String?
                    /// Creates a new `tx_codePayload`.
                    ///
                    /// - Parameters:
                    ///   - input_mode:
                    ///   - length:
                    ///   - description:
                    public init(
                        input_mode: Components.Schemas.GrantDto.urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload.tx_codePayload.input_modePayload? = nil,
                        length: Swift.Double? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.input_mode = input_mode
                        self.length = length
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case input_mode
                        case length
                        case description
                    }
                }
                /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code/tx_code`.
                public var tx_code: Components.Schemas.GrantDto.urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload.tx_codePayload?
                /// Creates a new `urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload`.
                ///
                /// - Parameters:
                ///   - pre_authorized_code:
                ///   - tx_code:
                public init(
                    pre_authorized_code: Swift.String? = nil,
                    tx_code: Components.Schemas.GrantDto.urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload.tx_codePayload? = nil
                ) {
                    self.pre_authorized_code = pre_authorized_code
                    self.tx_code = tx_code
                }
                public enum CodingKeys: String, CodingKey {
                    case pre_authorized_code
                    case tx_code
                }
            }
            /// - Remark: Generated from `#/components/schemas/GrantDto/urn:ietf:params:oauth:grant-type:pre-authorized_code`.
            public var urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_code: Components.Schemas.GrantDto.urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload?
            /// Creates a new `GrantDto`.
            ///
            /// - Parameters:
            ///   - authorization_code:
            ///   - urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_code:
            public init(
                authorization_code: Components.Schemas.GrantDto.authorization_codePayload? = nil,
                urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_code: Components.Schemas.GrantDto.urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_codePayload? = nil
            ) {
                self.authorization_code = authorization_code
                self.urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_code = urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_code
            }
            public enum CodingKeys: String, CodingKey {
                case authorization_code
                case urn_colon_ietf_colon_params_colon_oauth_colon_grant_hyphen_type_colon_pre_hyphen_authorized_code = "urn:ietf:params:oauth:grant-type:pre-authorized_code"
            }
        }
        /// - Remark: Generated from `#/components/schemas/HealthCheck`.
        public struct HealthCheck: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HealthCheck/database`.
            public var database: OpenAPIRuntime.OpenAPIObjectContainer
            /// - Remark: Generated from `#/components/schemas/HealthCheck/disk`.
            public var disk: OpenAPIRuntime.OpenAPIObjectContainer
            /// - Remark: Generated from `#/components/schemas/HealthCheck/memory`.
            public var memory: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `HealthCheck`.
            ///
            /// - Parameters:
            ///   - database:
            ///   - disk:
            ///   - memory:
            public init(
                database: OpenAPIRuntime.OpenAPIObjectContainer,
                disk: OpenAPIRuntime.OpenAPIObjectContainer,
                memory: OpenAPIRuntime.OpenAPIObjectContainer
            ) {
                self.database = database
                self.disk = disk
                self.memory = memory
            }
            public enum CodingKeys: String, CodingKey {
                case database
                case disk
                case memory
            }
        }
        /// - Remark: Generated from `#/components/schemas/InputDescriptor`.
        public struct InputDescriptor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints`.
            public struct constraintsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/fieldsPayload`.
                public struct fieldsPayloadPayload: Codable, Hashable, Sendable {
                    /// http://json-schema.org/draft-07/schema
                    ///
                    /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/fieldsPayload/filter`.
                    public struct filterPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `filterPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// http://json-schema.org/draft-07/schema
                    ///
                    /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/fieldsPayload/filter`.
                    public var filter: Components.Schemas.InputDescriptor.constraintsPayload.fieldsPayloadPayload.filterPayload?
                    /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/fieldsPayload/path`.
                    public var path: [Swift.String]?
                    /// Creates a new `fieldsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - filter: http://json-schema.org/draft-07/schema
                    ///   - path:
                    public init(
                        filter: Components.Schemas.InputDescriptor.constraintsPayload.fieldsPayloadPayload.filterPayload? = nil,
                        path: [Swift.String]? = nil
                    ) {
                        self.filter = filter
                        self.path = path
                    }
                    public enum CodingKeys: String, CodingKey {
                        case filter
                        case path
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/fields`.
                public typealias fieldsPayload = [Components.Schemas.InputDescriptor.constraintsPayload.fieldsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/fields`.
                public var fields: Components.Schemas.InputDescriptor.constraintsPayload.fieldsPayload?
                /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/limit_disclosure`.
                @frozen public enum limit_disclosurePayload: String, Codable, Hashable, Sendable {
                    case required = "required"
                    case preferred = "preferred"
                }
                /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints/limit_disclosure`.
                public var limit_disclosure: Components.Schemas.InputDescriptor.constraintsPayload.limit_disclosurePayload?
                /// Creates a new `constraintsPayload`.
                ///
                /// - Parameters:
                ///   - fields:
                ///   - limit_disclosure:
                public init(
                    fields: Components.Schemas.InputDescriptor.constraintsPayload.fieldsPayload? = nil,
                    limit_disclosure: Components.Schemas.InputDescriptor.constraintsPayload.limit_disclosurePayload? = nil
                ) {
                    self.fields = fields
                    self.limit_disclosure = limit_disclosure
                }
                public enum CodingKeys: String, CodingKey {
                    case fields
                    case limit_disclosure
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    fields = try container.decodeIfPresent(
                        Components.Schemas.InputDescriptor.constraintsPayload.fieldsPayload.self,
                        forKey: .fields
                    )
                    limit_disclosure = try container.decodeIfPresent(
                        Components.Schemas.InputDescriptor.constraintsPayload.limit_disclosurePayload.self,
                        forKey: .limit_disclosure
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "fields",
                        "limit_disclosure"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/constraints`.
            public var constraints: Components.Schemas.InputDescriptor.constraintsPayload
            /// http://identity.foundation/claim-format-registry/schemas/presentation-definition-claim-format-designations.json
            ///
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/format`.
            public struct formatPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `formatPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// http://identity.foundation/claim-format-registry/schemas/presentation-definition-claim-format-designations.json
            ///
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/format`.
            public var format: Components.Schemas.InputDescriptor.formatPayload?
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/group`.
            public var group: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InputDescriptor/purpose`.
            public var purpose: Swift.String?
            /// Creates a new `InputDescriptor`.
            ///
            /// - Parameters:
            ///   - constraints:
            ///   - format: http://identity.foundation/claim-format-registry/schemas/presentation-definition-claim-format-designations.json
            ///   - group:
            ///   - id:
            ///   - name:
            ///   - purpose:
            public init(
                constraints: Components.Schemas.InputDescriptor.constraintsPayload,
                format: Components.Schemas.InputDescriptor.formatPayload? = nil,
                group: [Swift.String]? = nil,
                id: Swift.String,
                name: Swift.String? = nil,
                purpose: Swift.String? = nil
            ) {
                self.constraints = constraints
                self.format = format
                self.group = group
                self.id = id
                self.name = name
                self.purpose = purpose
            }
            public enum CodingKeys: String, CodingKey {
                case constraints
                case format
                case group
                case id
                case name
                case purpose
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                constraints = try container.decode(
                    Components.Schemas.InputDescriptor.constraintsPayload.self,
                    forKey: .constraints
                )
                format = try container.decodeIfPresent(
                    Components.Schemas.InputDescriptor.formatPayload.self,
                    forKey: .format
                )
                group = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .group
                )
                id = try container.decode(
                    Swift.String.self,
                    forKey: .id
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                purpose = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .purpose
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "constraints",
                    "format",
                    "group",
                    "id",
                    "name",
                    "purpose"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/InternalServerError`.
        public struct InternalServerError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InternalServerError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case internal_server_error = "internal_server_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InternalServerError/error`.
            public var error: Components.Schemas.InternalServerError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InternalServerError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InternalServerError/message`.
            public var message: Swift.String
            /// Creates a new `InternalServerError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InternalServerError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidCredentialDataError`.
        public struct InvalidCredentialDataError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialDataError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_credential_data = "invalid_credential_data"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialDataError/error`.
            public var error: Components.Schemas.InvalidCredentialDataError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialDataError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialDataError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidCredentialDataError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidCredentialDataError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidCredentialOfferUrlError`.
        public struct InvalidCredentialOfferUrlError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialOfferUrlError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_credential_offer_url = "invalid_credential_offer_url"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialOfferUrlError/error`.
            public var error: Components.Schemas.InvalidCredentialOfferUrlError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialOfferUrlError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidCredentialOfferUrlError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidCredentialOfferUrlError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidCredentialOfferUrlError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidDateFilterValueError`.
        public struct InvalidDateFilterValueError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidDateFilterValueError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_date_filter_value = "invalid_date_filter_value"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidDateFilterValueError/error`.
            public var error: Components.Schemas.InvalidDateFilterValueError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidDateFilterValueError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidDateFilterValueError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidDateFilterValueError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidDateFilterValueError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidOrderFilterValueError`.
        public struct InvalidOrderFilterValueError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidOrderFilterValueError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_order_filter_value = "invalid_order_filter_value"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidOrderFilterValueError/error`.
            public var error: Components.Schemas.InvalidOrderFilterValueError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidOrderFilterValueError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidOrderFilterValueError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidOrderFilterValueError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidOrderFilterValueError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidPathParamError`.
        public struct InvalidPathParamError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPathParamError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_path_param = "invalid_path_param"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPathParamError/error`.
            public var error: Components.Schemas.InvalidPathParamError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPathParamError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPathParamError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidPathParamError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidPathParamError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidPerPageFilterValueError`.
        public struct InvalidPerPageFilterValueError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPerPageFilterValueError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_per_page_filter_value = "invalid_per_page_filter_value"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPerPageFilterValueError/error`.
            public var error: Components.Schemas.InvalidPerPageFilterValueError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPerPageFilterValueError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPerPageFilterValueError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidPerPageFilterValueError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidPerPageFilterValueError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidPresentationRequestUrlError`.
        public struct InvalidPresentationRequestUrlError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPresentationRequestUrlError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_presentation_request_url = "invalid_presentation_request_url"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPresentationRequestUrlError/error`.
            public var error: Components.Schemas.InvalidPresentationRequestUrlError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPresentationRequestUrlError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidPresentationRequestUrlError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidPresentationRequestUrlError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidPresentationRequestUrlError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidRequestPayloadError`.
        public struct InvalidRequestPayloadError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidRequestPayloadError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case invalid_request_payload = "invalid_request_payload"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidRequestPayloadError/error`.
            public var error: Components.Schemas.InvalidRequestPayloadError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidRequestPayloadError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidRequestPayloadError/message`.
            public var message: Swift.String
            /// Creates a new `InvalidRequestPayloadError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.InvalidRequestPayloadError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/JSONWebKey`.
        public struct JSONWebKey: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/crv`.
            public var crv: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/d`.
            public var d: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/dp`.
            public var dp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/dq`.
            public var dq: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/e`.
            public var e: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/k`.
            public var k: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/kid`.
            public var kid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/kty`.
            public var kty: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/n`.
            public var n: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/p`.
            public var p: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/q`.
            public var q: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/qi`.
            public var qi: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/x`.
            public var x: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKey/y`.
            public var y: Swift.String?
            /// Creates a new `JSONWebKey`.
            ///
            /// - Parameters:
            ///   - crv:
            ///   - d:
            ///   - dp:
            ///   - dq:
            ///   - e:
            ///   - k:
            ///   - kid:
            ///   - kty:
            ///   - n:
            ///   - p:
            ///   - q:
            ///   - qi:
            ///   - x:
            ///   - y:
            public init(
                crv: Swift.String? = nil,
                d: Swift.String? = nil,
                dp: Swift.String? = nil,
                dq: Swift.String? = nil,
                e: Swift.String? = nil,
                k: Swift.String? = nil,
                kid: Swift.String? = nil,
                kty: Swift.String? = nil,
                n: Swift.String? = nil,
                p: Swift.String? = nil,
                q: Swift.String? = nil,
                qi: Swift.String? = nil,
                x: Swift.String? = nil,
                y: Swift.String? = nil
            ) {
                self.crv = crv
                self.d = d
                self.dp = dp
                self.dq = dq
                self.e = e
                self.k = k
                self.kid = kid
                self.kty = kty
                self.n = n
                self.p = p
                self.q = q
                self.qi = qi
                self.x = x
                self.y = y
            }
            public enum CodingKeys: String, CodingKey {
                case crv
                case d
                case dp
                case dq
                case e
                case k
                case kid
                case kty
                case n
                case p
                case q
                case qi
                case x
                case y
            }
        }
        /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub`.
        public struct JSONWebKeyPub: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/crv`.
            public var crv: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/e`.
            public var e: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/k`.
            public var k: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/kid`.
            public var kid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/kty`.
            public var kty: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/n`.
            public var n: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/x`.
            public var x: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JSONWebKeyPub/y`.
            public var y: Swift.String?
            /// Creates a new `JSONWebKeyPub`.
            ///
            /// - Parameters:
            ///   - crv:
            ///   - e:
            ///   - k:
            ///   - kid:
            ///   - kty:
            ///   - n:
            ///   - x:
            ///   - y:
            public init(
                crv: Swift.String? = nil,
                e: Swift.String? = nil,
                k: Swift.String? = nil,
                kid: Swift.String? = nil,
                kty: Swift.String? = nil,
                n: Swift.String? = nil,
                x: Swift.String? = nil,
                y: Swift.String? = nil
            ) {
                self.crv = crv
                self.e = e
                self.k = k
                self.kid = kid
                self.kty = kty
                self.n = n
                self.x = x
                self.y = y
            }
            public enum CodingKeys: String, CodingKey {
                case crv
                case e
                case k
                case kid
                case kty
                case n
                case x
                case y
            }
        }
        /// - Remark: Generated from `#/components/schemas/KeyNotFoundError`.
        public struct KeyNotFoundError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotFoundError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case key_not_found = "key_not_found"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotFoundError/error`.
            public var error: Components.Schemas.KeyNotFoundError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotFoundError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotFoundError/message`.
            public var message: Swift.String
            /// Creates a new `KeyNotFoundError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.KeyNotFoundError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/KeyNotSupportedError`.
        public struct KeyNotSupportedError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotSupportedError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case key_not_supported = "key_not_supported"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotSupportedError/error`.
            public var error: Components.Schemas.KeyNotSupportedError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotSupportedError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/KeyNotSupportedError/message`.
            public var message: Swift.String
            /// Creates a new `KeyNotSupportedError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.KeyNotSupportedError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/KeySigningNotSupportedError`.
        public struct KeySigningNotSupportedError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/KeySigningNotSupportedError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case key_signing_not_supported = "key_signing_not_supported"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/KeySigningNotSupportedError/error`.
            public var error: Components.Schemas.KeySigningNotSupportedError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/KeySigningNotSupportedError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/KeySigningNotSupportedError/message`.
            public var message: Swift.String
            /// Creates a new `KeySigningNotSupportedError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.KeySigningNotSupportedError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/LoadCredentialError`.
        public struct LoadCredentialError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case load_credential_error = "load_credential_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialError/error`.
            public var error: Components.Schemas.LoadCredentialError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialError/message`.
            public var message: Swift.String
            /// Creates a new `LoadCredentialError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.LoadCredentialError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/LoadCredentialsError`.
        public struct LoadCredentialsError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialsError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case load_credentials_error = "load_credentials_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialsError/error`.
            public var error: Components.Schemas.LoadCredentialsError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialsError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/LoadCredentialsError/message`.
            public var message: Swift.String
            /// Creates a new `LoadCredentialsError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.LoadCredentialsError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/LoadWalletError`.
        public struct LoadWalletError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/LoadWalletError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case load_wallet_error = "load_wallet_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/LoadWalletError/error`.
            public var error: Components.Schemas.LoadWalletError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/LoadWalletError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/LoadWalletError/message`.
            public var message: Swift.String
            /// Creates a new `LoadWalletError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.LoadWalletError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationDefinition`.
        public struct PresentationDefinition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationDefinition/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PresentationDefinition/input_descriptors`.
            public var input_descriptors: [Components.Schemas.InputDescriptor]
            /// - Remark: Generated from `#/components/schemas/PresentationDefinition/submission_requirements`.
            public var submission_requirements: [Components.Schemas.SubmissionRequirement]?
            /// Creates a new `PresentationDefinition`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - input_descriptors:
            ///   - submission_requirements:
            public init(
                id: Swift.String,
                input_descriptors: [Components.Schemas.InputDescriptor],
                submission_requirements: [Components.Schemas.SubmissionRequirement]? = nil
            ) {
                self.id = id
                self.input_descriptors = input_descriptors
                self.submission_requirements = submission_requirements
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case input_descriptors
                case submission_requirements
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationRequestSendRequestModelDto`.
        public struct PresentationRequestSendRequestModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSendRequestModelDto/authorization_request_uri`.
            public var authorization_request_uri: Swift.String
            /// Specification draft version presentation request uses. If not specified draft10 is used.
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSendRequestModelDto/protocol_version`.
            @frozen public enum protocol_versionPayload: String, Codable, Hashable, Sendable {
                case draft10 = "draft10"
                case draft18 = "draft18"
            }
            /// Specification draft version presentation request uses. If not specified draft10 is used.
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSendRequestModelDto/protocol_version`.
            public var protocol_version: Components.Schemas.PresentationRequestSendRequestModelDto.protocol_versionPayload?
            /// Creates a new `PresentationRequestSendRequestModelDto`.
            ///
            /// - Parameters:
            ///   - authorization_request_uri:
            ///   - protocol_version: Specification draft version presentation request uses. If not specified draft10 is used.
            public init(
                authorization_request_uri: Swift.String,
                protocol_version: Components.Schemas.PresentationRequestSendRequestModelDto.protocol_versionPayload? = nil
            ) {
                self.authorization_request_uri = authorization_request_uri
                self.protocol_version = protocol_version
            }
            public enum CodingKeys: String, CodingKey {
                case authorization_request_uri
                case protocol_version
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationStatesResponseDto`.
        public struct PresentationStatesResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationStatesResponseDto/presentation_states`.
            public var presentation_states: [Components.Schemas.PresentationStateResponseDto]?
            /// - Remark: Generated from `#/components/schemas/PresentationStatesResponseDto/meta`.
            public var meta: Components.Schemas.Meta
            /// Creates a new `PresentationStatesResponseDto`.
            ///
            /// - Parameters:
            ///   - presentation_states:
            ///   - meta:
            public init(
                presentation_states: [Components.Schemas.PresentationStateResponseDto]? = nil,
                meta: Components.Schemas.Meta
            ) {
                self.presentation_states = presentation_states
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case presentation_states
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto`.
        public struct PresentationStateResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/authorization_request_uri`.
            public var authorization_request_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/meta`.
            public struct metaPayload: Codable, Hashable, Sendable {
                /// JWT respresentation of the request following RFC9101 (JAR)
                ///
                /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/meta/request`.
                public var request: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/meta/submission_status`.
                @frozen public enum submission_statusPayload: String, Codable, Hashable, Sendable {
                    case pending = "pending"
                    case failed = "failed"
                    case success = "success"
                }
                /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/meta/submission_status`.
                public var submission_status: Components.Schemas.PresentationStateResponseDto.metaPayload.submission_statusPayload?
                /// Creates a new `metaPayload`.
                ///
                /// - Parameters:
                ///   - request: JWT respresentation of the request following RFC9101 (JAR)
                ///   - submission_status:
                public init(
                    request: Swift.String? = nil,
                    submission_status: Components.Schemas.PresentationStateResponseDto.metaPayload.submission_statusPayload? = nil
                ) {
                    self.request = request
                    self.submission_status = submission_status
                }
                public enum CodingKeys: String, CodingKey {
                    case request
                    case submission_status
                }
            }
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/meta`.
            public var meta: Components.Schemas.PresentationStateResponseDto.metaPayload?
            /// Nonce provided by the verifier to be returned in the response
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/nonce`.
            public var nonce: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/presentation_definition`.
            public var presentation_definition: Components.Schemas.PresentationDefinition?
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/redirect_uri`.
            public var redirect_uri: Swift.String?
            /// Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post'
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/response_mode`.
            @frozen public enum response_modePayload: String, Codable, Hashable, Sendable {
                case direct_post = "direct_post"
            }
            /// Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post'
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/response_mode`.
            public var response_mode: Components.Schemas.PresentationStateResponseDto.response_modePayload?
            /// Response type of the request. Possible values are `vp_token`, `id_token`
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/response_type`.
            @frozen public enum response_typePayload: String, Codable, Hashable, Sendable {
                case vp_token = "vp_token"
                case vp_token_space_id_token = "vp_token id_token"
            }
            /// Response type of the request. Possible values are `vp_token`, `id_token`
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/response_type`.
            public var response_type: Components.Schemas.PresentationStateResponseDto.response_typePayload?
            /// Response uri of the request. Only relevant if response type is `direct_post`
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/response_uri`.
            public var response_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/state`.
            public var state: Swift.String?
            /// State provided by the verifier to be returned in the response
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationStateResponseDto/verifier_state`.
            public var verifier_state: Swift.String?
            /// Creates a new `PresentationStateResponseDto`.
            ///
            /// - Parameters:
            ///   - authorization_request_uri:
            ///   - client_id:
            ///   - meta:
            ///   - nonce: Nonce provided by the verifier to be returned in the response
            ///   - presentation_definition:
            ///   - redirect_uri:
            ///   - response_mode: Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post'
            ///   - response_type: Response type of the request. Possible values are `vp_token`, `id_token`
            ///   - response_uri: Response uri of the request. Only relevant if response type is `direct_post`
            ///   - state:
            ///   - verifier_state: State provided by the verifier to be returned in the response
            public init(
                authorization_request_uri: Swift.String? = nil,
                client_id: Swift.String? = nil,
                meta: Components.Schemas.PresentationStateResponseDto.metaPayload? = nil,
                nonce: Swift.String? = nil,
                presentation_definition: Components.Schemas.PresentationDefinition? = nil,
                redirect_uri: Swift.String? = nil,
                response_mode: Components.Schemas.PresentationStateResponseDto.response_modePayload? = nil,
                response_type: Components.Schemas.PresentationStateResponseDto.response_typePayload? = nil,
                response_uri: Swift.String? = nil,
                state: Swift.String? = nil,
                verifier_state: Swift.String? = nil
            ) {
                self.authorization_request_uri = authorization_request_uri
                self.client_id = client_id
                self.meta = meta
                self.nonce = nonce
                self.presentation_definition = presentation_definition
                self.redirect_uri = redirect_uri
                self.response_mode = response_mode
                self.response_type = response_type
                self.response_uri = response_uri
                self.state = state
                self.verifier_state = verifier_state
            }
            public enum CodingKeys: String, CodingKey {
                case authorization_request_uri
                case client_id
                case meta
                case nonce
                case presentation_definition
                case redirect_uri
                case response_mode
                case response_type
                case response_uri
                case state
                case verifier_state
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto`.
        public struct AuthorizationRequestResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/authorization_request_uri`.
            public var authorization_request_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/meta`.
            public struct metaPayload: Codable, Hashable, Sendable {
                /// JWT respresentation of the request following RFC9101 (JAR)
                ///
                /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/meta/request`.
                public var request: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/meta/submission_status`.
                @frozen public enum submission_statusPayload: String, Codable, Hashable, Sendable {
                    case pending = "pending"
                    case failed = "failed"
                    case success = "success"
                }
                /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/meta/submission_status`.
                public var submission_status: Components.Schemas.AuthorizationRequestResponseDto.metaPayload.submission_statusPayload?
                /// Creates a new `metaPayload`.
                ///
                /// - Parameters:
                ///   - request: JWT respresentation of the request following RFC9101 (JAR)
                ///   - submission_status:
                public init(
                    request: Swift.String? = nil,
                    submission_status: Components.Schemas.AuthorizationRequestResponseDto.metaPayload.submission_statusPayload? = nil
                ) {
                    self.request = request
                    self.submission_status = submission_status
                }
                public enum CodingKeys: String, CodingKey {
                    case request
                    case submission_status
                }
            }
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/meta`.
            public var meta: Components.Schemas.AuthorizationRequestResponseDto.metaPayload?
            /// Nonce provided by the verifier to be returned in the response
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/nonce`.
            public var nonce: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/presentation_definition`.
            public var presentation_definition: Components.Schemas.PresentationDefinition?
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/redirect_uri`.
            public var redirect_uri: Swift.String?
            /// Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post'
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/response_mode`.
            @frozen public enum response_modePayload: String, Codable, Hashable, Sendable {
                case direct_post = "direct_post"
            }
            /// Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post'
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/response_mode`.
            public var response_mode: Components.Schemas.AuthorizationRequestResponseDto.response_modePayload?
            /// Response type of the request. Possible values are `vp_token`, `id_token`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/response_type`.
            @frozen public enum response_typePayload: String, Codable, Hashable, Sendable {
                case vp_token = "vp_token"
                case vp_token_space_id_token = "vp_token id_token"
            }
            /// Response type of the request. Possible values are `vp_token`, `id_token`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/response_type`.
            public var response_type: Components.Schemas.AuthorizationRequestResponseDto.response_typePayload?
            /// Response uri of the request. Only relevant if response type is `direct_post`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/response_uri`.
            public var response_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/state`.
            public var state: Swift.String?
            /// State provided by the verifier to be returned in the response
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationRequestResponseDto/verifier_state`.
            public var verifier_state: Swift.String?
            /// Creates a new `AuthorizationRequestResponseDto`.
            ///
            /// - Parameters:
            ///   - authorization_request_uri:
            ///   - client_id:
            ///   - meta:
            ///   - nonce: Nonce provided by the verifier to be returned in the response
            ///   - presentation_definition:
            ///   - redirect_uri:
            ///   - response_mode: Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post'
            ///   - response_type: Response type of the request. Possible values are `vp_token`, `id_token`
            ///   - response_uri: Response uri of the request. Only relevant if response type is `direct_post`
            ///   - state:
            ///   - verifier_state: State provided by the verifier to be returned in the response
            public init(
                authorization_request_uri: Swift.String? = nil,
                client_id: Swift.String? = nil,
                meta: Components.Schemas.AuthorizationRequestResponseDto.metaPayload? = nil,
                nonce: Swift.String? = nil,
                presentation_definition: Components.Schemas.PresentationDefinition? = nil,
                redirect_uri: Swift.String? = nil,
                response_mode: Components.Schemas.AuthorizationRequestResponseDto.response_modePayload? = nil,
                response_type: Components.Schemas.AuthorizationRequestResponseDto.response_typePayload? = nil,
                response_uri: Swift.String? = nil,
                state: Swift.String? = nil,
                verifier_state: Swift.String? = nil
            ) {
                self.authorization_request_uri = authorization_request_uri
                self.client_id = client_id
                self.meta = meta
                self.nonce = nonce
                self.presentation_definition = presentation_definition
                self.redirect_uri = redirect_uri
                self.response_mode = response_mode
                self.response_type = response_type
                self.response_uri = response_uri
                self.state = state
                self.verifier_state = verifier_state
            }
            public enum CodingKeys: String, CodingKey {
                case authorization_request_uri
                case client_id
                case meta
                case nonce
                case presentation_definition
                case redirect_uri
                case response_mode
                case response_type
                case response_uri
                case state
                case verifier_state
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto`.
        public struct PresentationRequestSetCredentialsRequestModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentialsPayload`.
            public struct credentialsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentialsPayload/credential`.
                public struct credentialPayload: Codable, Hashable, Sendable {
                    /// List of claims to disclose when presenting the credential. When a claim is nested, use object notation.
                    ///
                    /// Examples: `given_name`, `address.street` or `nationality.country[0]`
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentialsPayload/credential/claims_to_disclose`.
                    public var claims_to_disclose: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentialsPayload/credential/id`.
                    public var id: Swift.String
                    /// Key to use for signing the presentation of the credential. If no key is specified, the key linked to the credential is used. If no key is linked to the credential, no signature is added to the presentation.
                    ///
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentialsPayload/credential/kid`.
                    public var kid: Swift.String?
                    /// Creates a new `credentialPayload`.
                    ///
                    /// - Parameters:
                    ///   - claims_to_disclose: List of claims to disclose when presenting the credential. When a claim is nested, use object notation.
                    ///   - id:
                    ///   - kid: Key to use for signing the presentation of the credential. If no key is specified, the key linked to the credential is used. If no key is linked to the credential, no signature is added to the presentation.
                    public init(
                        claims_to_disclose: [Swift.String]? = nil,
                        id: Swift.String,
                        kid: Swift.String? = nil
                    ) {
                        self.claims_to_disclose = claims_to_disclose
                        self.id = id
                        self.kid = kid
                    }
                    public enum CodingKeys: String, CodingKey {
                        case claims_to_disclose
                        case id
                        case kid
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentialsPayload/credential`.
                public var credential: Components.Schemas.PresentationRequestSetCredentialsRequestModelDto.credentialsPayloadPayload.credentialPayload
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentialsPayload/input_descriptor_id`.
                public var input_descriptor_id: Swift.String
                /// Creates a new `credentialsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - credential:
                ///   - input_descriptor_id:
                public init(
                    credential: Components.Schemas.PresentationRequestSetCredentialsRequestModelDto.credentialsPayloadPayload.credentialPayload,
                    input_descriptor_id: Swift.String
                ) {
                    self.credential = credential
                    self.input_descriptor_id = input_descriptor_id
                }
                public enum CodingKeys: String, CodingKey {
                    case credential
                    case input_descriptor_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentials`.
            public typealias credentialsPayload = [Components.Schemas.PresentationRequestSetCredentialsRequestModelDto.credentialsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/credentials`.
            public var credentials: Components.Schemas.PresentationRequestSetCredentialsRequestModelDto.credentialsPayload
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsRequestModelDto/state`.
            public var state: Swift.String
            /// Creates a new `PresentationRequestSetCredentialsRequestModelDto`.
            ///
            /// - Parameters:
            ///   - credentials:
            ///   - state:
            public init(
                credentials: Components.Schemas.PresentationRequestSetCredentialsRequestModelDto.credentialsPayload,
                state: Swift.String
            ) {
                self.credentials = credentials
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case credentials
                case state
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto`.
        public struct PresentationRequestSetCredentialsResponseModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentialsPayload`.
            public struct credentialsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentialsPayload/credential`.
                public struct credentialPayload: Codable, Hashable, Sendable {
                    /// List of claims to disclose when presenting the credential. When a claim is nested, use object notation.
                    ///
                    /// Examples: `given_name`, `address.street` or `nationality.country[0]`
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentialsPayload/credential/claims_to_disclose`.
                    public var claims_to_disclose: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentialsPayload/credential/id`.
                    public var id: Swift.String?
                    /// Key to use for signing the presentation of the credential. If no key is specified, the key linked to the credential is used. If no key is linked to the credential, no signature is added to the presentation.
                    ///
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentialsPayload/credential/kid`.
                    public var kid: Swift.String?
                    /// Creates a new `credentialPayload`.
                    ///
                    /// - Parameters:
                    ///   - claims_to_disclose: List of claims to disclose when presenting the credential. When a claim is nested, use object notation.
                    ///   - id:
                    ///   - kid: Key to use for signing the presentation of the credential. If no key is specified, the key linked to the credential is used. If no key is linked to the credential, no signature is added to the presentation.
                    public init(
                        claims_to_disclose: [Swift.String]? = nil,
                        id: Swift.String? = nil,
                        kid: Swift.String? = nil
                    ) {
                        self.claims_to_disclose = claims_to_disclose
                        self.id = id
                        self.kid = kid
                    }
                    public enum CodingKeys: String, CodingKey {
                        case claims_to_disclose
                        case id
                        case kid
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentialsPayload/credential`.
                public var credential: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.credentialsPayloadPayload.credentialPayload?
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentialsPayload/input_descriptor_id`.
                public var input_descriptor_id: Swift.String?
                /// Creates a new `credentialsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - credential:
                ///   - input_descriptor_id:
                public init(
                    credential: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.credentialsPayloadPayload.credentialPayload? = nil,
                    input_descriptor_id: Swift.String? = nil
                ) {
                    self.credential = credential
                    self.input_descriptor_id = input_descriptor_id
                }
                public enum CodingKeys: String, CodingKey {
                    case credential
                    case input_descriptor_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentials`.
            public typealias credentialsPayload = [Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.credentialsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/credentials`.
            public var credentials: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.credentialsPayload
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/meta`.
            public struct metaPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/meta/submission_status`.
                @frozen public enum submission_statusPayload: String, Codable, Hashable, Sendable {
                    case pending = "pending"
                    case failed = "failed"
                    case success = "success"
                }
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/meta/submission_status`.
                public var submission_status: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.metaPayload.submission_statusPayload?
                /// Creates a new `metaPayload`.
                ///
                /// - Parameters:
                ///   - submission_status:
                public init(submission_status: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.metaPayload.submission_statusPayload? = nil) {
                    self.submission_status = submission_status
                }
                public enum CodingKeys: String, CodingKey {
                    case submission_status
                }
            }
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/meta`.
            public var meta: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.metaPayload?
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/presentation_definition`.
            public var presentation_definition: Components.Schemas.PresentationDefinition?
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSetCredentialsResponseModelDto/state`.
            public var state: Swift.String
            /// Creates a new `PresentationRequestSetCredentialsResponseModelDto`.
            ///
            /// - Parameters:
            ///   - credentials:
            ///   - meta:
            ///   - presentation_definition:
            ///   - state:
            public init(
                credentials: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.credentialsPayload,
                meta: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto.metaPayload? = nil,
                presentation_definition: Components.Schemas.PresentationDefinition? = nil,
                state: Swift.String
            ) {
                self.credentials = credentials
                self.meta = meta
                self.presentation_definition = presentation_definition
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case credentials
                case meta
                case presentation_definition
                case state
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto`.
        public struct PresentationRequestSubmitRequestModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentialsPayload`.
            public struct credentialsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentialsPayload/credential`.
                public struct credentialPayload: Codable, Hashable, Sendable {
                    /// List of claims to disclose when presenting the credential. When a claim is nested, use object notation.
                    ///
                    /// Examples: `given_name`, `address.street` or `nationality.country[0]`
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentialsPayload/credential/claims_to_disclose`.
                    public var claims_to_disclose: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentialsPayload/credential/id`.
                    public var id: Swift.String
                    /// Key to use for signing the presentation of the credential. If no key is specified, the key linked to the credential is used. If no key is linked to the credential, no signature is added to the presentation.
                    ///
                    /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentialsPayload/credential/kid`.
                    public var kid: Swift.String?
                    /// Creates a new `credentialPayload`.
                    ///
                    /// - Parameters:
                    ///   - claims_to_disclose: List of claims to disclose when presenting the credential. When a claim is nested, use object notation.
                    ///   - id:
                    ///   - kid: Key to use for signing the presentation of the credential. If no key is specified, the key linked to the credential is used. If no key is linked to the credential, no signature is added to the presentation.
                    public init(
                        claims_to_disclose: [Swift.String]? = nil,
                        id: Swift.String,
                        kid: Swift.String? = nil
                    ) {
                        self.claims_to_disclose = claims_to_disclose
                        self.id = id
                        self.kid = kid
                    }
                    public enum CodingKeys: String, CodingKey {
                        case claims_to_disclose
                        case id
                        case kid
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentialsPayload/credential`.
                public var credential: Components.Schemas.PresentationRequestSubmitRequestModelDto.credentialsPayloadPayload.credentialPayload
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentialsPayload/input_descriptor_id`.
                public var input_descriptor_id: Swift.String
                /// Creates a new `credentialsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - credential:
                ///   - input_descriptor_id:
                public init(
                    credential: Components.Schemas.PresentationRequestSubmitRequestModelDto.credentialsPayloadPayload.credentialPayload,
                    input_descriptor_id: Swift.String
                ) {
                    self.credential = credential
                    self.input_descriptor_id = input_descriptor_id
                }
                public enum CodingKeys: String, CodingKey {
                    case credential
                    case input_descriptor_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentials`.
            public typealias credentialsPayload = [Components.Schemas.PresentationRequestSubmitRequestModelDto.credentialsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/credentials`.
            public var credentials: Components.Schemas.PresentationRequestSubmitRequestModelDto.credentialsPayload?
            /// Nonce provided by the verifier to be returned in the response
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/nonce`.
            public var nonce: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/presentation_definition`.
            public var presentation_definition: Components.Schemas.PresentationDefinition?
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/redirect_uri`.
            public var redirect_uri: Swift.String?
            /// Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post', 'post'.
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/response_mode`.
            @frozen public enum response_modePayload: String, Codable, Hashable, Sendable {
                case direct_post = "direct_post"
                case post = "post"
            }
            /// Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post', 'post'.
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/response_mode`.
            public var response_mode: Components.Schemas.PresentationRequestSubmitRequestModelDto.response_modePayload?
            /// Response type of the request. Possible values are `vp_token`, `id_token`
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/response_type`.
            @frozen public enum response_typePayload: String, Codable, Hashable, Sendable {
                case vp_token = "vp_token"
                case vp_token_space_id_token = "vp_token id_token"
                case id_token = "id_token"
            }
            /// Response type of the request. Possible values are `vp_token`, `id_token`
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/response_type`.
            public var response_type: Components.Schemas.PresentationRequestSubmitRequestModelDto.response_typePayload?
            /// Response uri of the request. Only relevant if response type is `direct_post`
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/response_uri`.
            public var response_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/state`.
            public var state: Swift.String
            /// State provided by the verifier to be returned in the response
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitRequestModelDto/verifier_state`.
            public var verifier_state: Swift.String?
            /// Creates a new `PresentationRequestSubmitRequestModelDto`.
            ///
            /// - Parameters:
            ///   - client_id:
            ///   - credentials:
            ///   - nonce: Nonce provided by the verifier to be returned in the response
            ///   - presentation_definition:
            ///   - redirect_uri:
            ///   - response_mode: Parameter to ask the Wallet to send the response to the verifier. Possible values are 'direct_post', 'post'.
            ///   - response_type: Response type of the request. Possible values are `vp_token`, `id_token`
            ///   - response_uri: Response uri of the request. Only relevant if response type is `direct_post`
            ///   - state:
            ///   - verifier_state: State provided by the verifier to be returned in the response
            public init(
                client_id: Swift.String? = nil,
                credentials: Components.Schemas.PresentationRequestSubmitRequestModelDto.credentialsPayload? = nil,
                nonce: Swift.String? = nil,
                presentation_definition: Components.Schemas.PresentationDefinition? = nil,
                redirect_uri: Swift.String? = nil,
                response_mode: Components.Schemas.PresentationRequestSubmitRequestModelDto.response_modePayload? = nil,
                response_type: Components.Schemas.PresentationRequestSubmitRequestModelDto.response_typePayload? = nil,
                response_uri: Swift.String? = nil,
                state: Swift.String,
                verifier_state: Swift.String? = nil
            ) {
                self.client_id = client_id
                self.credentials = credentials
                self.nonce = nonce
                self.presentation_definition = presentation_definition
                self.redirect_uri = redirect_uri
                self.response_mode = response_mode
                self.response_type = response_type
                self.response_uri = response_uri
                self.state = state
                self.verifier_state = verifier_state
            }
            public enum CodingKeys: String, CodingKey {
                case client_id
                case credentials
                case nonce
                case presentation_definition
                case redirect_uri
                case response_mode
                case response_type
                case response_uri
                case state
                case verifier_state
            }
        }
        /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitResponseModelDto`.
        public struct PresentationRequestSubmitResponseModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitResponseModelDto/meta`.
            public struct metaPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitResponseModelDto/meta/submission_status`.
                @frozen public enum submission_statusPayload: String, Codable, Hashable, Sendable {
                    case pending = "pending"
                    case failed = "failed"
                    case success = "success"
                }
                /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitResponseModelDto/meta/submission_status`.
                public var submission_status: Components.Schemas.PresentationRequestSubmitResponseModelDto.metaPayload.submission_statusPayload?
                /// Creates a new `metaPayload`.
                ///
                /// - Parameters:
                ///   - submission_status:
                public init(submission_status: Components.Schemas.PresentationRequestSubmitResponseModelDto.metaPayload.submission_statusPayload? = nil) {
                    self.submission_status = submission_status
                }
                public enum CodingKeys: String, CodingKey {
                    case submission_status
                }
            }
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitResponseModelDto/meta`.
            public var meta: Components.Schemas.PresentationRequestSubmitResponseModelDto.metaPayload?
            /// Redirect URI to follow on the frontend.
            ///
            /// In case of response_mode `fragment`, this contains the Authorization Response attributes and this is how they are passed to the verifier.
            ///
            /// In case of response_mode `direct_post`, this is the URI that was returned after successfully posting the Authorization Response to the `response_uri` of the verifier.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitResponseModelDto/redirect_uri`.
            public var redirect_uri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PresentationRequestSubmitResponseModelDto/state`.
            public var state: Swift.String?
            /// Creates a new `PresentationRequestSubmitResponseModelDto`.
            ///
            /// - Parameters:
            ///   - meta:
            ///   - redirect_uri: Redirect URI to follow on the frontend.
            ///   - state:
            public init(
                meta: Components.Schemas.PresentationRequestSubmitResponseModelDto.metaPayload? = nil,
                redirect_uri: Swift.String? = nil,
                state: Swift.String? = nil
            ) {
                self.meta = meta
                self.redirect_uri = redirect_uri
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case meta
                case redirect_uri
                case state
            }
        }
        /// - Remark: Generated from `#/components/schemas/RegisterWalletError`.
        public struct RegisterWalletError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterWalletError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case register_wallet_error = "register_wallet_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterWalletError/error`.
            public var error: Components.Schemas.RegisterWalletError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterWalletError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterWalletError/message`.
            public var message: Swift.String
            /// Creates a new `RegisterWalletError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.RegisterWalletError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/StatusDto`.
        public struct StatusDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StatusDto/app`.
            public var app: Components.Schemas.App
            /// - Remark: Generated from `#/components/schemas/StatusDto/appsignal`.
            public var appsignal: Components.Schemas.AppSignal
            /// - Remark: Generated from `#/components/schemas/StatusDto/database`.
            public var database: Components.Schemas.Database
            /// - Remark: Generated from `#/components/schemas/StatusDto/healthCheck`.
            public var healthCheck: Components.Schemas.HealthCheck
            /// Creates a new `StatusDto`.
            ///
            /// - Parameters:
            ///   - app:
            ///   - appsignal:
            ///   - database:
            ///   - healthCheck:
            public init(
                app: Components.Schemas.App,
                appsignal: Components.Schemas.AppSignal,
                database: Components.Schemas.Database,
                healthCheck: Components.Schemas.HealthCheck
            ) {
                self.app = app
                self.appsignal = appsignal
                self.database = database
                self.healthCheck = healthCheck
            }
            public enum CodingKeys: String, CodingKey {
                case app
                case appsignal
                case database
                case healthCheck
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubmissionRequirement`.
        @frozen public enum SubmissionRequirement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubmissionRequirement/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SubmissionRequirement/case1/count`.
                public var count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/SubmissionRequirement/case1/from`.
                public var from: Swift.String
                /// - Remark: Generated from `#/components/schemas/SubmissionRequirement/case1/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/SubmissionRequirement/case1/rule`.
                @frozen public enum rulePayload: String, Codable, Hashable, Sendable {
                    case pick = "pick"
                }
                /// - Remark: Generated from `#/components/schemas/SubmissionRequirement/case1/rule`.
                public var rule: Components.Schemas.SubmissionRequirement.Case1Payload.rulePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - count:
                ///   - from:
                ///   - name:
                ///   - rule:
                public init(
                    count: Swift.Int? = nil,
                    from: Swift.String,
                    name: Swift.String? = nil,
                    rule: Components.Schemas.SubmissionRequirement.Case1Payload.rulePayload
                ) {
                    self.count = count
                    self.from = from
                    self.name = name
                    self.rule = rule
                }
                public enum CodingKeys: String, CodingKey {
                    case count
                    case from
                    case name
                    case rule
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    count = try container.decodeIfPresent(
                        Swift.Int.self,
                        forKey: .count
                    )
                    from = try container.decode(
                        Swift.String.self,
                        forKey: .from
                    )
                    name = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .name
                    )
                    rule = try container.decode(
                        Components.Schemas.SubmissionRequirement.Case1Payload.rulePayload.self,
                        forKey: .rule
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "count",
                        "from",
                        "name",
                        "rule"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/SubmissionRequirement/case1`.
            case case1(Components.Schemas.SubmissionRequirement.Case1Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/VerifyCredentialError`.
        public struct VerifyCredentialError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/VerifyCredentialError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case verify_credential_error = "verify_credential_error"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/VerifyCredentialError/error`.
            public var error: Components.Schemas.VerifyCredentialError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/VerifyCredentialError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/VerifyCredentialError/message`.
            public var message: Swift.String
            /// Creates a new `VerifyCredentialError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.VerifyCredentialError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/VersionDto`.
        public struct VersionDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VersionDto/component`.
            public var component: Components.Schemas.Component
            /// Creates a new `VersionDto`.
            ///
            /// - Parameters:
            ///   - component:
            public init(component: Components.Schemas.Component) {
                self.component = component
            }
            public enum CodingKeys: String, CodingKey {
                case component
            }
        }
        /// - Remark: Generated from `#/components/schemas/WalletCountsResponseDto`.
        public struct WalletCountsResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WalletCountsResponseDto/wallet_metrics`.
            public var wallet_metrics: Components.Schemas.WalletCountsResponseModelDto
            /// Creates a new `WalletCountsResponseDto`.
            ///
            /// - Parameters:
            ///   - wallet_metrics:
            public init(wallet_metrics: Components.Schemas.WalletCountsResponseModelDto) {
                self.wallet_metrics = wallet_metrics
            }
            public enum CodingKeys: String, CodingKey {
                case wallet_metrics
            }
        }
        /// - Remark: Generated from `#/components/schemas/WalletCountsResponseModelDto`.
        public struct WalletCountsResponseModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WalletCountsResponseModelDto/all_wallets`.
            public var all_wallets: Swift.Double
            /// - Remark: Generated from `#/components/schemas/WalletCountsResponseModelDto/non_empty_wallets`.
            public var non_empty_wallets: Swift.Double
            /// Creates a new `WalletCountsResponseModelDto`.
            ///
            /// - Parameters:
            ///   - all_wallets:
            ///   - non_empty_wallets:
            public init(
                all_wallets: Swift.Double,
                non_empty_wallets: Swift.Double
            ) {
                self.all_wallets = all_wallets
                self.non_empty_wallets = non_empty_wallets
            }
            public enum CodingKeys: String, CodingKey {
                case all_wallets
                case non_empty_wallets
            }
        }
        /// - Remark: Generated from `#/components/schemas/WalletDIDDto`.
        public struct WalletDIDDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WalletDIDDto/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WalletDIDDto/keysPayload`.
            public struct keysPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/WalletDIDDto/keysPayload/kid`.
                public var kid: Swift.String?
                /// Creates a new `keysPayloadPayload`.
                ///
                /// - Parameters:
                ///   - kid:
                public init(kid: Swift.String? = nil) {
                    self.kid = kid
                }
                public enum CodingKeys: String, CodingKey {
                    case kid
                }
            }
            /// - Remark: Generated from `#/components/schemas/WalletDIDDto/keys`.
            public typealias keysPayload = [Components.Schemas.WalletDIDDto.keysPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/WalletDIDDto/keys`.
            public var keys: Components.Schemas.WalletDIDDto.keysPayload?
            /// Creates a new `WalletDIDDto`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - keys:
            public init(
                id: Swift.String? = nil,
                keys: Components.Schemas.WalletDIDDto.keysPayload? = nil
            ) {
                self.id = id
                self.keys = keys
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case keys
            }
        }
        /// - Remark: Generated from `#/components/schemas/WalletNotFoundError`.
        public struct WalletNotFoundError: Codable, Hashable, Sendable {
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/WalletNotFoundError/error`.
            @frozen public enum errorPayload: String, Codable, Hashable, Sendable {
                case wallet_not_found = "wallet_not_found"
            }
            /// Unique error identifier
            ///
            /// - Remark: Generated from `#/components/schemas/WalletNotFoundError/error`.
            public var error: Components.Schemas.WalletNotFoundError.errorPayload
            /// Object that may contain more information about the error
            ///
            /// - Remark: Generated from `#/components/schemas/WalletNotFoundError/extra_info`.
            public var extra_info: OpenAPIRuntime.OpenAPIObjectContainer
            /// User friendly error message
            ///
            /// - Remark: Generated from `#/components/schemas/WalletNotFoundError/message`.
            public var message: Swift.String
            /// Creates a new `WalletNotFoundError`.
            ///
            /// - Parameters:
            ///   - error: Unique error identifier
            ///   - extra_info: Object that may contain more information about the error
            ///   - message: User friendly error message
            public init(
                error: Components.Schemas.WalletNotFoundError.errorPayload,
                extra_info: OpenAPIRuntime.OpenAPIObjectContainer,
                message: Swift.String
            ) {
                self.error = error
                self.extra_info = extra_info
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case extra_info
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/WalletResponseDto`.
        public struct WalletResponseDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WalletResponseDto/wallet`.
            public var wallet: Components.Schemas.WalletResponseModelDto
            /// Creates a new `WalletResponseDto`.
            ///
            /// - Parameters:
            ///   - wallet:
            public init(wallet: Components.Schemas.WalletResponseModelDto) {
                self.wallet = wallet
            }
            public enum CodingKeys: String, CodingKey {
                case wallet
            }
        }
        /// - Remark: Generated from `#/components/schemas/WalletResponseModelDto`.
        public struct WalletResponseModelDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WalletResponseModelDto/dids`.
            public var dids: [Components.Schemas.WalletDIDDto]
            /// - Remark: Generated from `#/components/schemas/WalletResponseModelDto/external_reference`.
            public var external_reference: Swift.String
            /// - Remark: Generated from `#/components/schemas/WalletResponseModelDto/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/WalletResponseModelDto/keys`.
            public var keys: [Components.Schemas.JSONWebKeyPub]
            /// Creates a new `WalletResponseModelDto`.
            ///
            /// - Parameters:
            ///   - dids:
            ///   - external_reference:
            ///   - id:
            ///   - keys:
            public init(
                dids: [Components.Schemas.WalletDIDDto],
                external_reference: Swift.String,
                id: Swift.String,
                keys: [Components.Schemas.JSONWebKeyPub]
            ) {
                self.dids = dids
                self.external_reference = external_reference
                self.id = id
                self.keys = keys
            }
            public enum CodingKeys: String, CodingKey {
                case dids
                case external_reference
                case id
                case keys
            }
        }
        /// - Remark: Generated from `#/components/schemas/Meta`.
        public struct Meta: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Meta/order_by`.
            public var order_by: Swift.String
            /// - Remark: Generated from `#/components/schemas/Meta/order`.
            @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                case ASC = "ASC"
                case DESC = "DESC"
            }
            /// - Remark: Generated from `#/components/schemas/Meta/order`.
            public var order: Components.Schemas.Meta.orderPayload
            /// - Remark: Generated from `#/components/schemas/Meta/order_from_params`.
            public var order_from_params: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Meta/per_page`.
            public var per_page: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Meta/per_page_from_params`.
            public var per_page_from_params: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Meta/records_count`.
            public var records_count: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Meta/page`.
            public var page: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Meta/page_count`.
            public var page_count: Swift.Double
            /// Creates a new `Meta`.
            ///
            /// - Parameters:
            ///   - order_by:
            ///   - order:
            ///   - order_from_params:
            ///   - per_page:
            ///   - per_page_from_params:
            ///   - records_count:
            ///   - page:
            ///   - page_count:
            public init(
                order_by: Swift.String,
                order: Components.Schemas.Meta.orderPayload,
                order_from_params: Swift.Bool,
                per_page: Swift.Double,
                per_page_from_params: Swift.Bool,
                records_count: Swift.Double,
                page: Swift.Double,
                page_count: Swift.Double
            ) {
                self.order_by = order_by
                self.order = order
                self.order_from_params = order_from_params
                self.per_page = per_page
                self.per_page_from_params = per_page_from_params
                self.records_count = records_count
                self.page = page
                self.page_count = page_count
            }
            public enum CodingKeys: String, CodingKey {
                case order_by
                case order
                case order_from_params
                case per_page
                case per_page_from_params
                case records_count
                case page
                case page_count
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get deployed service version information
    ///
    /// Endpoint to read deployed service version information.
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(AppController_getVersion)`.
    public enum AppController_getVersion {
        public static let id: Swift.String = "AppController_getVersion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/version/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppController_getVersion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppController_getVersion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppController_getVersion.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.AppController_getVersion.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/version/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/version/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VersionDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VersionDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppController_getVersion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppController_getVersion.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//version/get(AppController_getVersion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppController_getVersion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppController_getVersion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get deployed service status information
    ///
    /// Endpoint to read deployed service status information.
    ///
    /// - Remark: HTTP `GET /system/status`.
    /// - Remark: Generated from `#/paths//system/status/get(AppController_getSystemStatus)`.
    public enum AppController_getSystemStatus {
        public static let id: Swift.String = "AppController_getSystemStatus"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/status/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppController_getSystemStatus.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppController_getSystemStatus.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppController_getSystemStatus.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.AppController_getSystemStatus.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/status/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/system/status/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.StatusDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StatusDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppController_getSystemStatus.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppController_getSystemStatus.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//system/status/get(AppController_getSystemStatus)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppController_getSystemStatus.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppController_getSystemStatus.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Wallet metrics
    ///
    /// - Remark: HTTP `GET /system/metrics/wallets`.
    /// - Remark: Generated from `#/paths//system/metrics/wallets/get(SystemMetricsController_getWalletCounts)`.
    public enum SystemMetricsController_getWalletCounts {
        public static let id: Swift.String = "SystemMetricsController_getWalletCounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Counts only wallets created after the given date
                ///
                /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/query/start_date`.
                public var start_date: Swift.String?
                /// Counts only wallets created before the given date
                ///
                /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/query/end_date`.
                public var end_date: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - start_date: Counts only wallets created after the given date
                ///   - end_date: Counts only wallets created before the given date
                public init(
                    start_date: Swift.String? = nil,
                    end_date: Swift.String? = nil
                ) {
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.SystemMetricsController_getWalletCounts.Input.Query
            /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemMetricsController_getWalletCounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemMetricsController_getWalletCounts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SystemMetricsController_getWalletCounts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.SystemMetricsController_getWalletCounts.Input.Query = .init(),
                headers: Operations.SystemMetricsController_getWalletCounts.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.WalletCountsResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletCountsResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SystemMetricsController_getWalletCounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SystemMetricsController_getWalletCounts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Metrics successfully fetched
            ///
            /// - Remark: Generated from `#/paths//system/metrics/wallets/get(SystemMetricsController_getWalletCounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemMetricsController_getWalletCounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SystemMetricsController_getWalletCounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidDateFilterValueError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidDateFilterValueError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SystemMetricsController_getWalletCounts.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SystemMetricsController_getWalletCounts.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//system/metrics/wallets/get(SystemMetricsController_getWalletCounts)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SystemMetricsController_getWalletCounts.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.SystemMetricsController_getWalletCounts.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/system/metrics/wallets/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.InternalServerError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InternalServerError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SystemMetricsController_getWalletCounts.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SystemMetricsController_getWalletCounts.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//system/metrics/wallets/get(SystemMetricsController_getWalletCounts)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemMetricsController_getWalletCounts.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.SystemMetricsController_getWalletCounts.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register or find a Wallet
    ///
    /// Register a new Wallet. Optionally use `external_reference`. When a Wallet exists with the given `external_reference`, the existing Wallet information is returned making the operation idempotent.
    /// If `external_reference` is not used a new Wallet is always created.
    ///
    /// Based on the configuration of the component, a Wallet has a default key and DID assigned to it. This key and DID are used to register and authenticate the Wallet with the SVX API.
    ///
    ///
    /// - Remark: HTTP `POST /wallets`.
    /// - Remark: Generated from `#/paths//wallets/post(WalletsController_create)`.
    public enum WalletsController_create {
        public static let id: Swift.String = "WalletsController_create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.WalletsController_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.WalletsController_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.WalletsController_create.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateWalletPayloadDto)
            }
            public var body: Operations.WalletsController_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WalletsController_create.Input.Headers = .init(),
                body: Operations.WalletsController_create.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.WalletResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Existing Wallet successfully loaded
            ///
            /// - Remark: Generated from `#/paths//wallets/post(WalletsController_create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WalletsController_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WalletsController_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.WalletResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// New Wallet successfuly registered
            ///
            /// - Remark: Generated from `#/paths//wallets/post(WalletsController_create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.WalletsController_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.WalletsController_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidRequestPayloadError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidRequestPayloadError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_create.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_create.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/post(WalletsController_create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.WalletsController_create.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.WalletsController_create.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/POST/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/POST/responses/500/content/json/case1`.
                        case RegisterWalletError(Components.Schemas.RegisterWalletError)
                        /// - Remark: Generated from `#/paths/wallets/POST/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .RegisterWalletError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .RegisterWalletError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/POST/responses/500/content/application\/json`.
                    case json(Operations.WalletsController_create.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.WalletsController_create.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_create.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_create.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/post(WalletsController_create)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.WalletsController_create.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.WalletsController_create.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Wallet by ID
    ///
    /// Fetch Wallet information by ID.
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/get(WalletsController_getOne)`.
    public enum WalletsController_getOne {
        public static let id: Swift.String = "WalletsController_getOne"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.WalletsController_getOne.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.WalletsController_getOne.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.WalletsController_getOne.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.WalletsController_getOne.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.WalletsController_getOne.Input.Path,
                headers: Operations.WalletsController_getOne.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.WalletResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_getOne.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_getOne.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Wallet information successfully loaded
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/get(WalletsController_getOne)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WalletsController_getOne.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WalletsController_getOne.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidPathParamError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidPathParamError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_getOne.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_getOne.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/get(WalletsController_getOne)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.WalletsController_getOne.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.WalletsController_getOne.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_getOne.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_getOne.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/get(WalletsController_getOne)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.WalletsController_getOne.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.WalletsController_getOne.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/500/content/json/case1`.
                        case LoadWalletError(Components.Schemas.LoadWalletError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .LoadWalletError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .LoadWalletError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/GET/responses/500/content/application\/json`.
                    case json(Operations.WalletsController_getOne.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.WalletsController_getOne.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_getOne.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_getOne.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/get(WalletsController_getOne)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.WalletsController_getOne.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.WalletsController_getOne.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete Wallet by ID
    ///
    /// Deleted Wallet by ID. All information stored inside the Wallet will be deleted as well.
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/delete(WalletsController_deleteOne)`.
    public enum WalletsController_deleteOne {
        public static let id: Swift.String = "WalletsController_deleteOne"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.WalletsController_deleteOne.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.WalletsController_deleteOne.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.WalletsController_deleteOne.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.WalletsController_deleteOne.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.WalletsController_deleteOne.Input.Path,
                headers: Operations.WalletsController_deleteOne.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Wallet successfuly removed
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/delete(WalletsController_deleteOne)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.WalletsController_deleteOne.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.WalletsController_deleteOne.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidPathParamError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidPathParamError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_deleteOne.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_deleteOne.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/delete(WalletsController_deleteOne)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.WalletsController_deleteOne.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.WalletsController_deleteOne.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_deleteOne.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_deleteOne.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/delete(WalletsController_deleteOne)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.WalletsController_deleteOne.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.WalletsController_deleteOne.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/500/content/json/case1`.
                        case DeleteWalletError(Components.Schemas.DeleteWalletError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .DeleteWalletError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .DeleteWalletError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/DELETE/responses/500/content/application\/json`.
                    case json(Operations.WalletsController_deleteOne.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.WalletsController_deleteOne.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.WalletsController_deleteOne.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.WalletsController_deleteOne.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/delete(WalletsController_deleteOne)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.WalletsController_deleteOne.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.WalletsController_deleteOne.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a key for a Wallet
    ///
    /// Create a new cryptographic key associated with the Wallet. Keys are created using the JOSE JWK standard using attribute strings listed in the [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml).
    ///
    /// Depending on the configuration of the service only certain cryptographic keys are supported.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/post(KeysController_create)`.
    public enum KeysController_create {
        public static let id: Swift.String = "KeysController_create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.KeysController_create.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeysController_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeysController_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.KeysController_create.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/requestBody/json/key`.
                    public struct keyPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/requestBody/json/key/crv`.
                        public var crv: Swift.String
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/requestBody/json/key/kty`.
                        public var kty: Swift.String
                        /// Creates a new `keyPayload`.
                        ///
                        /// - Parameters:
                        ///   - crv:
                        ///   - kty:
                        public init(
                            crv: Swift.String,
                            kty: Swift.String
                        ) {
                            self.crv = crv
                            self.kty = kty
                        }
                        public enum CodingKeys: String, CodingKey {
                            case crv
                            case kty
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/requestBody/json/key`.
                    public var key: Operations.KeysController_create.Input.Body.jsonPayload.keyPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    public init(key: Operations.KeysController_create.Input.Body.jsonPayload.keyPayload? = nil) {
                        self.key = key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                    }
                }
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/requestBody/content/application\/json`.
                case json(Operations.KeysController_create.Input.Body.jsonPayload)
            }
            public var body: Operations.KeysController_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.KeysController_create.Input.Path,
                headers: Operations.KeysController_create.Input.Headers = .init(),
                body: Operations.KeysController_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/responses/201/content/json/key`.
                        public var key: Components.Schemas.JSONWebKeyPub?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        public init(key: Components.Schemas.JSONWebKeyPub? = nil) {
                            self.key = key
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/responses/201/content/application\/json`.
                    case json(Operations.KeysController_create.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeysController_create.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeysController_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeysController_create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// New key successfully created
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/post(KeysController_create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.KeysController_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.KeysController_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidRequestPayloadError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidRequestPayloadError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeysController_create.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeysController_create.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Key could not be created
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/post(KeysController_create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.KeysController_create.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.KeysController_create.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a key for a Wallet
    ///
    /// Return the cryptographic key information for a key associated with a Wallet.
    ///
    /// The information returned contains only header and public attributes of the key, i.e. not the private key information which is kept in the Wallet. Key information is returned in the JOSE JWK standard using attribute strings listed in the [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml).
    ///
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/keys/{keyId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/get(KeysController_get)`.
    public enum KeysController_get {
        public static let id: Swift.String = "KeysController_get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/path/keyId`.
                public var keyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - keyId:
                public init(
                    walletId: Swift.String,
                    keyId: Swift.String
                ) {
                    self.walletId = walletId
                    self.keyId = keyId
                }
            }
            public var path: Operations.KeysController_get.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeysController_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeysController_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.KeysController_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.KeysController_get.Input.Path,
                headers: Operations.KeysController_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/200/content/json/key`.
                        public var key: Components.Schemas.JSONWebKeyPub?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        public init(key: Components.Schemas.JSONWebKeyPub? = nil) {
                            self.key = key
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/200/content/application\/json`.
                    case json(Operations.KeysController_get.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeysController_get.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeysController_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeysController_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Key successfully loaded
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/get(KeysController_get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.KeysController_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.KeysController_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/404/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/404/content/json/case1`.
                        case WalletNotFoundError(Components.Schemas.WalletNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/404/content/json/case2`.
                        case KeyNotFoundError(Components.Schemas.KeyNotFoundError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .WalletNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .KeyNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .WalletNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .KeyNotFoundError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/GET/responses/404/content/application\/json`.
                    case json(Operations.KeysController_get.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeysController_get.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeysController_get.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeysController_get.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/get(KeysController_get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.KeysController_get.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.KeysController_get.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a key from a Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/keys/{keyId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/delete(KeysController_delete)`.
    public enum KeysController_delete {
        public static let id: Swift.String = "KeysController_delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/path/keyId`.
                public var keyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - keyId:
                public init(
                    walletId: Swift.String,
                    keyId: Swift.String
                ) {
                    self.walletId = walletId
                    self.keyId = keyId
                }
            }
            public var path: Operations.KeysController_delete.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeysController_delete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeysController_delete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.KeysController_delete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.KeysController_delete.Input.Path,
                headers: Operations.KeysController_delete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Key successfully removed
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/delete(KeysController_delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.KeysController_delete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.KeysController_delete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidPathParamError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidPathParamError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeysController_delete.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeysController_delete.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/delete(KeysController_delete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.KeysController_delete.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.KeysController_delete.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeysController_delete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeysController_delete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/delete(KeysController_delete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.KeysController_delete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.KeysController_delete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Import a key to a Wallet
    ///
    /// Import an existing cryptographic key to a Wallet using the JOSE JWK notation.
    ///
    /// Depending on the configuration of the service only certain cryptographic keys are supported.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys/import`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/import/post(KeyController_Import)`.
    public enum KeyController_Import {
        public static let id: Swift.String = "KeyController_Import"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.KeyController_Import.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeyController_Import.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeyController_Import.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.KeyController_Import.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/requestBody/json/key`.
                    public var key: Components.Schemas.JSONWebKey?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    public init(key: Components.Schemas.JSONWebKey? = nil) {
                        self.key = key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                    }
                }
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/requestBody/content/application\/json`.
                case json(Operations.KeyController_Import.Input.Body.jsonPayload)
            }
            public var body: Operations.KeyController_Import.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.KeyController_Import.Input.Path,
                headers: Operations.KeyController_Import.Input.Headers = .init(),
                body: Operations.KeyController_Import.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/201/content/json/key`.
                        public var key: Components.Schemas.JSONWebKeyPub?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        public init(key: Components.Schemas.JSONWebKeyPub? = nil) {
                            self.key = key
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/201/content/application\/json`.
                    case json(Operations.KeyController_Import.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeyController_Import.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeyController_Import.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeyController_Import.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Key has been imported
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/import/post(KeyController_Import)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.KeyController_Import.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.KeyController_Import.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/400/content/json/case1`.
                        case KeyNotSupportedError(Components.Schemas.KeyNotSupportedError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/400/content/json/case2`.
                        case InvalidRequestPayloadError(Components.Schemas.InvalidRequestPayloadError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .KeyNotSupportedError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidRequestPayloadError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .KeyNotSupportedError(value):
                                try value.encode(to: encoder)
                            case let .InvalidRequestPayloadError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/import/POST/responses/400/content/application\/json`.
                    case json(Operations.KeyController_Import.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeyController_Import.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeyController_Import.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeyController_Import.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Key could not be imported
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/import/post(KeyController_Import)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.KeyController_Import.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.KeyController_Import.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sign data with a key from a wallet
    ///
    /// Create a signature based on data provided using a cryptographic key associated with a Wallet.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/keys/{keyId}/sign`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/sign/post(KeyController_sign)`.
    public enum KeyController_sign {
        public static let id: Swift.String = "KeyController_sign"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/path/keyId`.
                public var keyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - keyId:
                public init(
                    walletId: Swift.String,
                    keyId: Swift.String
                ) {
                    self.walletId = walletId
                    self.keyId = keyId
                }
            }
            public var path: Operations.KeyController_sign.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeyController_sign.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KeyController_sign.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.KeyController_sign.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/requestBody/json/data`.
                    public var data: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - data:
                    public init(data: Swift.String? = nil) {
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case data
                    }
                }
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/requestBody/content/application\/json`.
                case json(Operations.KeyController_sign.Input.Body.jsonPayload)
            }
            public var body: Operations.KeyController_sign.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.KeyController_sign.Input.Path,
                headers: Operations.KeyController_sign.Input.Headers = .init(),
                body: Operations.KeyController_sign.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/201/content/json/signature`.
                        public var signature: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - signature:
                        public init(signature: Swift.String? = nil) {
                            self.signature = signature
                        }
                        public enum CodingKeys: String, CodingKey {
                            case signature
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/201/content/application\/json`.
                    case json(Operations.KeyController_sign.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeyController_sign.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeyController_sign.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeyController_sign.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Key has been created
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/sign/post(KeyController_sign)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.KeyController_sign.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.KeyController_sign.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/400/content/json/case1`.
                        case InvalidRequestPayloadError(Components.Schemas.InvalidRequestPayloadError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/400/content/json/case2`.
                        case KeySigningNotSupportedError(Components.Schemas.KeySigningNotSupportedError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .InvalidRequestPayloadError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .KeySigningNotSupportedError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .InvalidRequestPayloadError(value):
                                try value.encode(to: encoder)
                            case let .KeySigningNotSupportedError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/400/content/application\/json`.
                    case json(Operations.KeyController_sign.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeyController_sign.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeyController_sign.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeyController_sign.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Data could not be signed
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/sign/post(KeyController_sign)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.KeyController_sign.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.KeyController_sign.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/404/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/404/content/json/case1`.
                        case WalletNotFoundError(Components.Schemas.WalletNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/404/content/json/case2`.
                        case KeyNotFoundError(Components.Schemas.KeyNotFoundError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .WalletNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .KeyNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .WalletNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .KeyNotFoundError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/keys/{keyId}/sign/POST/responses/404/content/application\/json`.
                    case json(Operations.KeyController_sign.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.KeyController_sign.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.KeyController_sign.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.KeyController_sign.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/keys/{keyId}/sign/post(KeyController_sign)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.KeyController_sign.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.KeyController_sign.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a DID for a Wallet
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/dids`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/post(DidController_create)`.
    public enum DidController_create {
        public static let id: Swift.String = "DidController_create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.DidController_create.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DidController_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DidController_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DidController_create.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/method`.
                    public var method: Swift.String?
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options`.
                    public struct optionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options/codec`.
                        public var codec: Swift.String?
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options/key`.
                        public struct keyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options/key/crv`.
                            public var crv: Swift.String?
                            /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options/key/kty`.
                            public var kty: Swift.String?
                            /// Creates a new `keyPayload`.
                            ///
                            /// - Parameters:
                            ///   - crv:
                            ///   - kty:
                            public init(
                                crv: Swift.String? = nil,
                                kty: Swift.String? = nil
                            ) {
                                self.crv = crv
                                self.kty = kty
                            }
                            public enum CodingKeys: String, CodingKey {
                                case crv
                                case kty
                            }
                        }
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options/key`.
                        public var key: Operations.DidController_create.Input.Body.jsonPayload.optionsPayload.keyPayload?
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options/network`.
                        public var network: Swift.String?
                        /// Creates a new `optionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - codec:
                        ///   - key:
                        ///   - network:
                        public init(
                            codec: Swift.String? = nil,
                            key: Operations.DidController_create.Input.Body.jsonPayload.optionsPayload.keyPayload? = nil,
                            network: Swift.String? = nil
                        ) {
                            self.codec = codec
                            self.key = key
                            self.network = network
                        }
                        public enum CodingKeys: String, CodingKey {
                            case codec
                            case key
                            case network
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/json/options`.
                    public var options: Operations.DidController_create.Input.Body.jsonPayload.optionsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - method:
                    ///   - options:
                    public init(
                        method: Swift.String? = nil,
                        options: Operations.DidController_create.Input.Body.jsonPayload.optionsPayload? = nil
                    ) {
                        self.method = method
                        self.options = options
                    }
                    public enum CodingKeys: String, CodingKey {
                        case method
                        case options
                    }
                }
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/requestBody/content/application\/json`.
                case json(Operations.DidController_create.Input.Body.jsonPayload)
            }
            public var body: Operations.DidController_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.DidController_create.Input.Path,
                headers: Operations.DidController_create.Input.Headers = .init(),
                body: Operations.DidController_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/responses/201/content/json/did`.
                        public var did: Components.Schemas.WalletDIDDto?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - did:
                        public init(did: Components.Schemas.WalletDIDDto? = nil) {
                            self.did = did
                        }
                        public enum CodingKeys: String, CodingKey {
                            case did
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/responses/201/content/application\/json`.
                    case json(Operations.DidController_create.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DidController_create.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DidController_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DidController_create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// DID has been created
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/post(DidController_create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.DidController_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.DidController_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DidController_create.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DidController_create.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/post(DidController_create)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DidController_create.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DidController_create.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a DID from a Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/dids/{id}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/{id}/delete(DidController_delete)`.
    public enum DidController_delete {
        public static let id: Swift.String = "DidController_delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/{id}/DELETE/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - id:
                public init(
                    walletId: Swift.String,
                    id: Swift.String
                ) {
                    self.walletId = walletId
                    self.id = id
                }
            }
            public var path: Operations.DidController_delete.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/{id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DidController_delete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DidController_delete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DidController_delete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DidController_delete.Input.Path,
                headers: Operations.DidController_delete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// DID has been successfully deleted
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/{id}/delete(DidController_delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DidController_delete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.DidController_delete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/{id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/dids/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DidController_delete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DidController_delete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/dids/{id}/delete(DidController_delete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DidController_delete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DidController_delete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get credential receive states
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/receive`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get(ReceiveController_findAll)`.
    public enum ReceiveController_findAll {
        public static let id: Swift.String = "ReceiveController_findAll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.ReceiveController_findAll.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case ASC = "ASC"
                    case DESC = "DESC"
                }
                /// Issuance state response order. Default ordering: `DESC` (Supported: `ASC`, `DESC`)
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/query/order`.
                public var order: Operations.ReceiveController_findAll.Input.Query.orderPayload?
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/query/order_by`.
                @frozen public enum order_byPayload: String, Codable, Hashable, Sendable {
                    case created_at = "created_at"
                }
                /// Order Issuance state by an attribute, defaults to: `created_at` (Supported: `created_at`)
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/query/order_by`.
                public var order_by: Operations.ReceiveController_findAll.Input.Query.order_byPayload?
                /// Number of records per page
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/query/per_page`.
                public var per_page: OpenAPIRuntime.OpenAPIValueContainer?
                /// Page number (starting from 1)
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/query/page`.
                public var page: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - order: Issuance state response order. Default ordering: `DESC` (Supported: `ASC`, `DESC`)
                ///   - order_by: Order Issuance state by an attribute, defaults to: `created_at` (Supported: `created_at`)
                ///   - per_page: Number of records per page
                ///   - page: Page number (starting from 1)
                public init(
                    order: Operations.ReceiveController_findAll.Input.Query.orderPayload? = nil,
                    order_by: Operations.ReceiveController_findAll.Input.Query.order_byPayload? = nil,
                    per_page: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    page: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.order = order
                    self.order_by = order_by
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.ReceiveController_findAll.Input.Query
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_findAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_findAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReceiveController_findAll.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ReceiveController_findAll.Input.Path,
                query: Operations.ReceiveController_findAll.Input.Query = .init(),
                headers: Operations.ReceiveController_findAll.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CredentialReceiveStatesModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialReceiveStatesModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_findAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_findAll.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Credential receive states successfully loaded
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get(ReceiveController_findAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReceiveController_findAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ReceiveController_findAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/400/content/json/case1`.
                        case InvalidPathParamError(Components.Schemas.InvalidPathParamError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/400/content/json/case2`.
                        case InvalidOrderFilterValueError(Components.Schemas.InvalidOrderFilterValueError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/400/content/json/case3`.
                        case InvalidPerPageFilterValueError(Components.Schemas.InvalidPerPageFilterValueError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .InvalidPathParamError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidOrderFilterValueError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidPerPageFilterValueError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .InvalidPathParamError(value):
                                try value.encode(to: encoder)
                            case let .InvalidOrderFilterValueError(value):
                                try value.encode(to: encoder)
                            case let .InvalidPerPageFilterValueError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/400/content/application\/json`.
                    case json(Operations.ReceiveController_findAll.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ReceiveController_findAll.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_findAll.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_findAll.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get(ReceiveController_findAll)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ReceiveController_findAll.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ReceiveController_findAll.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_findAll.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_findAll.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get(ReceiveController_findAll)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ReceiveController_findAll.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ReceiveController_findAll.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/500/content/json/case1`.
                        case LoadCredentialsError(Components.Schemas.LoadCredentialsError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .LoadCredentialsError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .LoadCredentialsError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/GET/responses/500/content/application\/json`.
                    case json(Operations.ReceiveController_findAll.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ReceiveController_findAll.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_findAll.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_findAll.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get(ReceiveController_findAll)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ReceiveController_findAll.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.ReceiveController_findAll.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register credential offer
    ///
    /// Credential offer is a JSON encoded object that the issuer uses to pass information to the wallet and initiate the issuance process.
    /// This endpoint is used to validate, parse and extract the necessary information, leading to the next step in the process, getting an access token.
    ///
    /// For more information on the structure of the credential offer object, see section 4.1 in OpenID4VCI.
    ///
    /// The three supported methods for registering a credential offer are:
    /// - `credential_offer`: Pass the JSON object by value
    /// - `credential_offer_uri`: Pass the JSON object by reference. The service performs a GET request to retrieve the object.
    /// - `credential_offer_endpoint` - Credential Offer sent by the issuer to the wallet credential offer endpoint. It contains a single URI query parameter, either credential_offer or credential_offer_uri
    ///
    /// Note that the options above are mutually exclusive.
    ///
    /// After successfully registering the credential offer, a state is returned. This state is used as an identifier to link subsequent calls to receive endpoints.
    ///
    /// ### Next Step
    ///
    /// To continue the issuance process, call:
    ///
    /// ```POST /wallets/{walletId}/receive/get_access_token```
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/post(ReceiveController_create)`.
    public enum ReceiveController_create {
        public static let id: Swift.String = "ReceiveController_create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.ReceiveController_create.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReceiveController_create.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CredentialReceiveRequestModelDto)
            }
            public var body: Operations.ReceiveController_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ReceiveController_create.Input.Path,
                headers: Operations.ReceiveController_create.Input.Headers = .init(),
                body: Operations.ReceiveController_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.CredentialReceiveResponseModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialReceiveResponseModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Successful registration of the credential offer.
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/post(ReceiveController_create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ReceiveController_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.ReceiveController_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/responses/400/content/json/case1`.
                        case InvalidCredentialOfferUrlError(Components.Schemas.InvalidCredentialOfferUrlError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .InvalidCredentialOfferUrlError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .InvalidCredentialOfferUrlError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/POST/responses/400/content/application\/json`.
                    case json(Operations.ReceiveController_create.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ReceiveController_create.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_create.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_create.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad Request - The request was invalid or cannot be otherwise served.
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/post(ReceiveController_create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ReceiveController_create.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ReceiveController_create.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get access token
    ///
    /// The get access token endpoint ensures the wallet is able to retrieve a valid access token to go to the next step of actually getting the credential(s).
    ///
    /// Two flows that are supported are:
    /// - Pre-Authorized Code Flow
    /// - Authorization Code Flow
    ///
    /// ### Authorization Code Flow
    ///
    /// Uses the `authorization_code` as defined in RFC6749 to issue access tokens.
    ///
    /// This is usually a two-step process, that involves authentication on the front channel (through a browser window) to be performed by the client.
    ///
    /// In step 1, a call to this endpoint returns the `authorization_url`. This URL is what needs to be opened in a browser window and will authenticate the end-user to the service.
    /// This includes a redirect_uri responsible for receiving and storing the `authorization_code`.
    ///
    /// In step 2, the service, exchanges the code for an access token by calling the Token Endpoint.
    ///
    /// Note that at this point, the wallet initiated Authorization Code flow is not supported.
    ///
    /// ### Pre-Authorized Code Flow
    ///
    /// This flow is used when the issuer has already authenticated and authorized the end-user.
    /// The issuer provides a Pre-Authorized Code in the credential offer which is used to exchange it for an access token in the Token Endpoint.
    /// The Authorization Endpoint is not used in this flow.
    ///
    /// For more information, see section 3.5 in OpenID4VCI.
    ///
    /// ### Next Step
    ///
    /// To continue the issuance process, call:
    ///
    /// ```POST /wallets/{walletId}/receive/get_credential```
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive/get_access_token`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_access_token/post(ReceiveController_getAccessToken)`.
    public enum ReceiveController_getAccessToken {
        public static let id: Swift.String = "ReceiveController_getAccessToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.ReceiveController_getAccessToken.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_getAccessToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_getAccessToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReceiveController_getAccessToken.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CredentialReceiveGetAccessTokenRequestModelDto)
            }
            public var body: Operations.ReceiveController_getAccessToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ReceiveController_getAccessToken.Input.Path,
                headers: Operations.ReceiveController_getAccessToken.Input.Headers = .init(),
                body: Operations.ReceiveController_getAccessToken.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.CredentialReceiveGetAccessTokenResponseModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialReceiveGetAccessTokenResponseModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_getAccessToken.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_getAccessToken.Output.Created.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_access_token/post(ReceiveController_getAccessToken)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ReceiveController_getAccessToken.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.ReceiveController_getAccessToken.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_access_token/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_getAccessToken.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_getAccessToken.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_access_token/post(ReceiveController_getAccessToken)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ReceiveController_getAccessToken.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ReceiveController_getAccessToken.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get verifiable credential
    ///
    /// Get credential from the issuer and perform key binding. A valid access token is required in order to call this endpoint.
    ///
    /// See section 7 in OpenID4VCI for more information.
    ///
    /// ### Key Binding
    ///
    /// Key binding is performed by providing either
    ///
    /// - `kid`: Public key is presented.
    /// - `did`: DID is presented referencing one of the keys contained in the `verificationMethod` section of the DID document.
    ///
    /// Both methods involve the wallet presenting key proof to the issuer to ensure control over cryptographic key material.
    ///
    /// See section 7.2.1 in OpenID4VCI for more information.
    ///
    /// ### Requesting Multiple Credentials in Sequence
    ///
    /// The `c_nonce` and `c_nonce_expires_in` returned by the issuer allow requesting the same credential, but binding it to different key material.
    /// The service automatically manages these attributes, ensuring the correct `c_nonce` is used, allowing multiple credentials to be retrieved, but with different keys.
    ///
    /// ### Not Supported Options
    ///
    /// Note that the following are not supported by the endpoint
    ///
    /// - `transaction_id`: Part of the deferred issuance flow, allows receiving a credential by referencing a `transaction_id`
    /// - Receiving encrypted credentials
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/receive/get_credential`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_credential/post(ReceiveController_getCredential)`.
    public enum ReceiveController_getCredential {
        public static let id: Swift.String = "ReceiveController_getCredential"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.ReceiveController_getCredential.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_getCredential.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_getCredential.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReceiveController_getCredential.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CredentialReceiveGetCredentialRequestModelDto)
            }
            public var body: Operations.ReceiveController_getCredential.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ReceiveController_getCredential.Input.Path,
                headers: Operations.ReceiveController_getCredential.Input.Headers = .init(),
                body: Operations.ReceiveController_getCredential.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.CredentialReceiveGetCredentialResponseModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialReceiveGetCredentialResponseModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_getCredential.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_getCredential.Output.Created.Body) {
                    self.body = body
                }
            }
            /// New credential successfully added to the Wallet
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_credential/post(ReceiveController_getCredential)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ReceiveController_getCredential.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.ReceiveController_getCredential.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/get_credential/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_getCredential.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_getCredential.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/get_credential/post(ReceiveController_getCredential)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ReceiveController_getCredential.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ReceiveController_getCredential.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get receive credential state
    ///
    /// Get the current state of a receive credential flow.
    ///
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/receive/{state}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/{state}/get(ReceiveController_findOne)`.
    public enum ReceiveController_findOne {
        public static let id: Swift.String = "ReceiveController_findOne"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/path/state`.
                public var state: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - state:
                public init(
                    walletId: Swift.String,
                    state: Swift.String
                ) {
                    self.walletId = walletId
                    self.state = state
                }
            }
            public var path: Operations.ReceiveController_findOne.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_findOne.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReceiveController_findOne.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReceiveController_findOne.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.ReceiveController_findOne.Input.Path,
                headers: Operations.ReceiveController_findOne.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CredentialReceiveStateModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialReceiveStateModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_findOne.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_findOne.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/{state}/get(ReceiveController_findOne)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReceiveController_findOne.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ReceiveController_findOne.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/receive/{state}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReceiveController_findOne.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReceiveController_findOne.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/receive/{state}/get(ReceiveController_findOne)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ReceiveController_findOne.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ReceiveController_findOne.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// authorization_code flow Holder Wallet redirect uri 
    ///
    /// `authorization_code` redirect uri that was started via `/receive` endpoint.<br/>
    /// `state` and `code` come as a query parameters.<br/>
    /// `code` is exchanged for the `access_token` so client can call `POST /wallets/{walletId}/receive/get_credential` endpoint right away.
    ///
    ///
    /// - Remark: HTTP `GET /wallets/receive/callback`.
    /// - Remark: Generated from `#/paths//wallets/receive/callback/get(ReceiveController_callback)`.
    public enum ReceiveController_callback {
        public static let id: Swift.String = "ReceiveController_callback"
        public struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            public init() {}
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// Creates a new `Found`.
                public init() {}
            }
            /// Issuer response captured and processed - redirect back to the client Wallet
            ///
            /// - Remark: Generated from `#/paths//wallets/receive/callback/get(ReceiveController_callback)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.ReceiveController_callback.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.ReceiveController_callback.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get presentation states
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/send`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/get(PresentationController_findAll)`.
    public enum PresentationController_findAll {
        public static let id: Swift.String = "PresentationController_findAll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.PresentationController_findAll.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case ASC = "ASC"
                    case DESC = "DESC"
                }
                /// Presentation States response order. Default ordering: `DESC` (Supported: `ASC`, `DESC`)
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/query/order`.
                public var order: Operations.PresentationController_findAll.Input.Query.orderPayload?
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/query/order_by`.
                @frozen public enum order_byPayload: String, Codable, Hashable, Sendable {
                    case created_at = "created_at"
                }
                /// Order Presentation States by an attribute, defaults to: `created_at` (Supported: `created_at`)
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/query/order_by`.
                public var order_by: Operations.PresentationController_findAll.Input.Query.order_byPayload?
                /// Number of records per page
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/query/per_page`.
                public var per_page: OpenAPIRuntime.OpenAPIValueContainer?
                /// Page number (starting from 1)
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/query/page`.
                public var page: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - order: Presentation States response order. Default ordering: `DESC` (Supported: `ASC`, `DESC`)
                ///   - order_by: Order Presentation States by an attribute, defaults to: `created_at` (Supported: `created_at`)
                ///   - per_page: Number of records per page
                ///   - page: Page number (starting from 1)
                public init(
                    order: Operations.PresentationController_findAll.Input.Query.orderPayload? = nil,
                    order_by: Operations.PresentationController_findAll.Input.Query.order_byPayload? = nil,
                    per_page: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    page: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.order = order
                    self.order_by = order_by
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.PresentationController_findAll.Input.Query
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PresentationController_findAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PresentationController_findAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PresentationController_findAll.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.PresentationController_findAll.Input.Path,
                query: Operations.PresentationController_findAll.Input.Query = .init(),
                headers: Operations.PresentationController_findAll.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PresentationStatesResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PresentationStatesResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PresentationController_findAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PresentationController_findAll.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Presentation states successfully loaded
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/get(PresentationController_findAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PresentationController_findAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PresentationController_findAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/400/content/json/case1`.
                        case InvalidPathParamError(Components.Schemas.InvalidPathParamError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/400/content/json/case2`.
                        case InvalidOrderFilterValueError(Components.Schemas.InvalidOrderFilterValueError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/400/content/json/case3`.
                        case InvalidPerPageFilterValueError(Components.Schemas.InvalidPerPageFilterValueError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .InvalidPathParamError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidOrderFilterValueError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidPerPageFilterValueError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .InvalidPathParamError(value):
                                try value.encode(to: encoder)
                            case let .InvalidOrderFilterValueError(value):
                                try value.encode(to: encoder)
                            case let .InvalidPerPageFilterValueError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/400/content/application\/json`.
                    case json(Operations.PresentationController_findAll.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PresentationController_findAll.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PresentationController_findAll.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PresentationController_findAll.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/get(PresentationController_findAll)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.PresentationController_findAll.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.PresentationController_findAll.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PresentationController_findAll.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PresentationController_findAll.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/get(PresentationController_findAll)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PresentationController_findAll.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PresentationController_findAll.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/500/content/json/case1`.
                        case LoadCredentialsError(Components.Schemas.LoadCredentialsError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .LoadCredentialsError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .LoadCredentialsError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/GET/responses/500/content/application\/json`.
                    case json(Operations.PresentationController_findAll.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PresentationController_findAll.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PresentationController_findAll.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PresentationController_findAll.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/get(PresentationController_findAll)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PresentationController_findAll.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.PresentationController_findAll.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register authorization request
    ///
    /// Parse the authorization request URI and get the following information.
    ///
    /// - `client_id`: The Client ID of the verifier.
    /// - `client_id_scheme`: The Client ID scheme of the verifier.
    /// - `client_metadata`: Verifier client metadata.
    /// - `nonce`: Nonce provided by the verifier to be returned in the response
    /// - `presentation_definition`: What credentials the verifier is requesting from the Wallet.
    /// - `redirect_uri`: The redirect URI of the verifier.
    /// - `response_mode`: How to return the response.
    /// - `response_type`: Which parameters to use to return the presentation to the verifier.
    /// - `response_uri`: Where to send the response.
    /// - `verifier_state`: State passed by the verifier to link request and response.
    /// - `meta.protocol_version`: Version of the protocol to be used. Supported values `draft10` and `draft18`. The default value is `draft10`.
    ///
    /// This information informs the Wallet how to process the request and respond to the verifier.
    ///
    /// ## Request Parameters
    ///
    /// The following sections describe in more detail the parameters, their default values and behaviour.
    ///
    /// ### client_id (required)
    ///
    /// Depending on the `client_id_scheme` the Client ID is either the `client_id`, the `redirect_uri` or the `did` of the verifier.
    ///
    /// ### client_id_scheme
    ///
    /// The mechanism to obtain and validate metadata of a verifier beyond that specified in RFC6749.
    ///
    /// Currently supported values are:
    /// - `pre-registered` (default): The verifier is pre-registered with the SVX Platform.
    /// - `redirect_uri`: The redirect URI is the identifier of the verifier. Note that in this case the request MUST NOT be signed.
    /// - `did`: The DID is the identifier of the verifier. Note that in this case the request MUST be signed with a `verificationMethod` property in the DID document. This also requires that verifier metadata is passed using `client_metadata` or `client_metadata_uri`.
    ///
    /// ### client_metadata (required)
    ///
    /// Client metadata, also called verifier metadata in this case can be implemented using static configuration values, as well as employ Dynamic Discovery.
    ///
    /// The static configuration is usually bound to an existing profile, for example.
    ///
    /// - [JWT VC Presentation Profile](https://identity.foundation/jwt-vc-presentation-profile/)
    /// - [HAIP](https://openid.net/specs/openid4vc-high-assurance-interoperability-profile-sd-jwt-vc-1_0-00.html)
    ///
    /// They use specific, custom URL schemes such as `openid-vc` or `haip`. When these are used, values referred to in these profiles should be used as client metadata.
    ///
    /// Each network can define their own set of static configuration values for client metadata.
    ///
    /// The use of fedarations or trust schemes is not yet supported.
    ///
    /// ### nonce
    ///
    /// Nonce to be returned in the response to prevent replay attacks.
    ///
    /// ### presentation_definition (required)
    ///
    /// Expresses which credentials a verifier asks a wallet to present. The syntax to do this should conform to DIF Presentation Exchange specification.
    /// The structure of the definition is validated by a JSON schema associated with the `presentation_definition` schema in the OpenAPI definition.
    ///
    /// It is also possible to use `presentation_definition_uri`. In this case the wallet performs a GET request to the `presentation_definition_uri` and parses the response.
    /// The response is stored in the `presentation_definition` attribute.
    ///
    /// Note that the service does not necessarily support all options defined in the Presentation Exchange specification.
    ///
    /// ### response_mode
    ///
    /// How the response is sent to the verifier. Possible values are
    ///
    /// - `direct_post`: In this mode, the Authorization Response is sent to the Verifier using an HTTPS POST request to an endpoint controlled by the Verifier. The Authorization Response parameters are encoded in the body using the application/x-www-form-urlencoded content type.
    ///
    /// When using `direct_post`, note that the `redirect_uri` must be returned after successfully posting the Authorization Response to the `response_uri`.
    ///
    /// Note that `fragment` is currently not supported.
    ///
    /// ### response_uri
    ///
    /// If the `response_mode` is `direct_post` this is the URI to send the response to.
    ///
    /// ### verifier_state
    ///
    /// Opaque state that can be used to link the request and response. Is returned as the `state` parameter in the Authorization Response.
    ///
    /// ## Use of JAR (RFC9101)
    ///
    /// JAR (RFC9101) is a JWT representation of the request. The JWT is signed with the verifier's private key.
    /// There are two ways to do this.
    ///
    /// - `request`: The `request` parameter is the JWT representation of the request.
    /// - `request_uri`: The `request_uri` parameter is the URL of the request.
    ///
    /// In most cases `request_uri` is used instead of `request` as it is more convenient, especially in situations when a QR code is used to represent the authorization request.
    ///
    /// The JAR contains the necessary information and is fetched, verified and subsequently parsed. See the previous section for more details.
    ///
    /// ## Examples
    ///
    /// Below are some examples of valid authorization requests and how they are parsed.
    ///
    /// ```
    /// openid-vc://?request_uri=https://example.com/oidc/presentations/requests/c63aa3e9-dc7d-4753-9ac8-30bf7add6e4c/jwt&client_id=https://example.com/cb
    /// ```
    ///
    /// This is an example where JAR is used. First, the `request_uri` is used to fetch the request JWT. The JWT is validated and then parsed. The parsed request is stored in the `metadata.request` attribute.
    /// All the required information, except for the `client_id` is fetched from the JWT, validated and stored.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/post(PresentationController_create)`.
    public enum PresentationController_create {
        public static let id: Swift.String = "PresentationController_create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.PresentationController_create.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PresentationController_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PresentationController_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PresentationController_create.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PresentationRequestSendRequestModelDto)
            }
            public var body: Operations.PresentationController_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.PresentationController_create.Input.Path,
                headers: Operations.PresentationController_create.Input.Headers = .init(),
                body: Operations.PresentationController_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.AuthorizationRequestResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AuthorizationRequestResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PresentationController_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PresentationController_create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Successful registration of the presentation authorization request.
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/post(PresentationController_create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.PresentationController_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.PresentationController_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/responses/400/content/json/case1`.
                        case InvalidPresentationRequestUrlError(Components.Schemas.InvalidPresentationRequestUrlError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .InvalidPresentationRequestUrlError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .InvalidPresentationRequestUrlError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/POST/responses/400/content/application\/json`.
                    case json(Operations.PresentationController_create.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PresentationController_create.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PresentationController_create.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PresentationController_create.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad Request - The request was invalid or cannot be otherwise served.
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/post(PresentationController_create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.PresentationController_create.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.PresentationController_create.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the credentials to be presented
    ///
    /// Set the credentials to be presented as part of this presentation response.
    ///
    /// Each credential must be linked to an input descriptor from the credential definition.
    /// For credentials that support selective disclosure, there is the possibility to use the `claims_to_disclose` property.
    /// Use object notation to specify which claims to disclose. For example:
    ///
    /// ```
    /// "claims_to_disclose": ["given_name", "address.street_address", "address.locality", "nationalities[0]"]
    /// ```
    ///
    /// If a claim or a nested claim is not found in the credential or it doesn't support selective disclosure, it will be ignored.
    ///
    /// By default, the key ID linked to the credential is used to sign the presentation. The `kid` property can be used to specify another key ID. If no key ID is linked to the credential and none is specified, no signature is added to the presentation.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send/set_credentials`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/set_credentials/post(SendController_setCredentials)`.
    public enum SendController_setCredentials {
        public static let id: Swift.String = "SendController_setCredentials"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.SendController_setCredentials.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendController_setCredentials.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendController_setCredentials.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SendController_setCredentials.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PresentationRequestSetCredentialsRequestModelDto)
            }
            public var body: Operations.SendController_setCredentials.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.SendController_setCredentials.Input.Path,
                headers: Operations.SendController_setCredentials.Input.Headers = .init(),
                body: Operations.SendController_setCredentials.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.PresentationRequestSetCredentialsResponseModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PresentationRequestSetCredentialsResponseModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendController_setCredentials.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendController_setCredentials.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Successful registration of the credential offer.
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/set_credentials/post(SendController_setCredentials)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.SendController_setCredentials.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.SendController_setCredentials.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/set_credentials/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendController_setCredentials.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendController_setCredentials.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/set_credentials/post(SendController_setCredentials)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.SendController_setCredentials.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.SendController_setCredentials.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Submit the presentation response to the verifier
    ///
    /// Generate the presentation response to present the credentials to the verifier.
    ///
    /// Based on the `response_type`, the following parameters are included in the response:
    ///
    /// The response always includes:
    /// - `vp_token`: A single JSON string or array of JSON strings representing the presentation.
    /// - `presentation_submission`: A JSON object containing the mapping between the requested credentials and where to find them in the returned VP token. This follows the DIF Presentation Exchange specification.
    ///
    /// Optionally, the following is also included:
    /// - `id_token`: A single JSON string that proves control of the wallet over key material.
    ///
    /// Depending on the `response_mode` option, the response can be sent to the verifier using an HTTPS POST request or an HTTP redirect.
    ///
    /// In case of `response_mode=fragment` (default), the response is sent via the front channel by opening the `redirect_uri`, which is returned in the response to this request.
    /// This `redirect_uri` includes all the response parameters. Note that this is currently not supported.
    ///
    /// In case of `response_mode=direct_post` or `response_mode=post`, the response is submitted via an HTTPS POST request to the `response_uri`.
    /// In this case, it is expected that a `redirect_uri` is returned in the response to this request.
    /// This `redirect_uri` is also to be opened in the front channel, but is simply used to continue the verification process and not to transmit the response to the verifier.
    ///
    /// The status of this submission can be tracked via the `meta.submission_status` attribute. Note that in case of `response_mode=fragment`, the status is always `success`.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/send/submit`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/submit/post(SendController_submit)`.
    public enum SendController_submit {
        public static let id: Swift.String = "SendController_submit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.SendController_submit.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendController_submit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendController_submit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SendController_submit.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PresentationRequestSubmitRequestModelDto)
            }
            public var body: Operations.SendController_submit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.SendController_submit.Input.Path,
                headers: Operations.SendController_submit.Input.Headers = .init(),
                body: Operations.SendController_submit.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.PresentationRequestSubmitResponseModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PresentationRequestSubmitResponseModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendController_submit.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendController_submit.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Successful submission of presentation response
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/submit/post(SendController_submit)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.SendController_submit.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.SendController_submit.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/submit/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendController_submit.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendController_submit.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/submit/post(SendController_submit)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.SendController_submit.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.SendController_submit.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get present credential state
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/send/{state}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/send/{state}/get(SendController_findOne)`.
    public enum SendController_findOne {
        public static let id: Swift.String = "SendController_findOne"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/path/state`.
                public var state: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - state:
                public init(
                    walletId: Swift.String,
                    state: Swift.String
                ) {
                    self.walletId = walletId
                    self.state = state
                }
            }
            public var path: Operations.SendController_findOne.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendController_findOne.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendController_findOne.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SendController_findOne.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.SendController_findOne.Input.Path,
                headers: Operations.SendController_findOne.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PresentationStateResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PresentationStateResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendController_findOne.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendController_findOne.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful registration of the credential offer.
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/{state}/get(SendController_findOne)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SendController_findOne.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SendController_findOne.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/send/{state}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendController_findOne.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendController_findOne.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/send/{state}/get(SendController_findOne)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.SendController_findOne.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.SendController_findOne.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Import credential
    ///
    /// Import an existing credential from a known format into a Wallet.
    ///
    /// Depending on how key binding is performed, the import process associates the credential with the given `did` and/or `kid` if managed by the wallet:
    /// - `did`: The DID used for binding a DID to the credential.
    /// - `kid`: The key ID used for binding the key to the credential.
    ///
    /// If the `did` or `kid` is not managed by the wallet, fields are ignored. They can later be updated with `PATCH /wallets/{walletId}/credentials/{credentialId}`.
    ///
    ///
    /// - Remark: HTTP `POST /wallets/{walletId}/credentials/import`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/import/post(CredentialsController_import)`.
    public enum CredentialsController_import {
        public static let id: Swift.String = "CredentialsController_import"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.CredentialsController_import.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_import.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_import.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CredentialsController_import.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CredentialImportRequestModelDto)
            }
            public var body: Operations.CredentialsController_import.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CredentialsController_import.Input.Path,
                headers: Operations.CredentialsController_import.Input.Headers = .init(),
                body: Operations.CredentialsController_import.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.CredentialResponseModelDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialResponseModelDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_import.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_import.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Credential imported
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/import/post(CredentialsController_import)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.CredentialsController_import.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.CredentialsController_import.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/400/content/json/case1`.
                        case InvalidPathParamError(Components.Schemas.InvalidPathParamError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/400/content/json/case2`.
                        case InvalidCredentialDataError(Components.Schemas.InvalidCredentialDataError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .InvalidPathParamError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidCredentialDataError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .InvalidPathParamError(value):
                                try value.encode(to: encoder)
                            case let .InvalidCredentialDataError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/400/content/application\/json`.
                    case json(Operations.CredentialsController_import.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_import.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_import.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_import.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/import/post(CredentialsController_import)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CredentialsController_import.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CredentialsController_import.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/import/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_import.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_import.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/import/post(CredentialsController_import)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CredentialsController_import.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CredentialsController_import.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get credentials
    ///
    /// Fetch a paginated list of credentials stored inside the Wallet.
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/get(CredentialsController_findAll)`.
    public enum CredentialsController_findAll {
        public static let id: Swift.String = "CredentialsController_findAll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/path/walletId`.
                public var walletId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                public init(walletId: Swift.String) {
                    self.walletId = walletId
                }
            }
            public var path: Operations.CredentialsController_findAll.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Next credentials page cursor filter
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/query/next_page_after`.
                public var next_page_after: Swift.String?
                /// Credentials per page filter
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/query/per_page`.
                public var per_page: Swift.String?
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Credential order by their creation date filter
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/query/order`.
                public var order: Operations.CredentialsController_findAll.Input.Query.orderPayload?
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/query/format`.
                @frozen public enum formatPayload: String, Codable, Hashable, Sendable {
                    case vc_plus_sd_hyphen_jwt = "vc+sd-jwt"
                    case jwt_vc_json = "jwt_vc_json"
                }
                /// Filter credentials by their format
                ///
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/query/format`.
                public var format: Operations.CredentialsController_findAll.Input.Query.formatPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - next_page_after: Next credentials page cursor filter
                ///   - per_page: Credentials per page filter
                ///   - order: Credential order by their creation date filter
                ///   - format: Filter credentials by their format
                public init(
                    next_page_after: Swift.String? = nil,
                    per_page: Swift.String? = nil,
                    order: Operations.CredentialsController_findAll.Input.Query.orderPayload? = nil,
                    format: Operations.CredentialsController_findAll.Input.Query.formatPayload? = nil
                ) {
                    self.next_page_after = next_page_after
                    self.per_page = per_page
                    self.order = order
                    self.format = format
                }
            }
            public var query: Operations.CredentialsController_findAll.Input.Query
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_findAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_findAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CredentialsController_findAll.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.CredentialsController_findAll.Input.Path,
                query: Operations.CredentialsController_findAll.Input.Query = .init(),
                headers: Operations.CredentialsController_findAll.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CredentialsResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialsResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findAll.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Wallet credentials successfully loaded
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/get(CredentialsController_findAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CredentialsController_findAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CredentialsController_findAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/400/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/400/content/json/case1`.
                        case InvalidPathParamError(Components.Schemas.InvalidPathParamError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/400/content/json/case2`.
                        case InvalidOrderFilterValueError(Components.Schemas.InvalidOrderFilterValueError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/400/content/json/case3`.
                        case InvalidPerPageFilterValueError(Components.Schemas.InvalidPerPageFilterValueError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .InvalidPathParamError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidOrderFilterValueError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InvalidPerPageFilterValueError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .InvalidPathParamError(value):
                                try value.encode(to: encoder)
                            case let .InvalidOrderFilterValueError(value):
                                try value.encode(to: encoder)
                            case let .InvalidPerPageFilterValueError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/400/content/application\/json`.
                    case json(Operations.CredentialsController_findAll.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_findAll.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findAll.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findAll.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/get(CredentialsController_findAll)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CredentialsController_findAll.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CredentialsController_findAll.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.WalletNotFoundError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WalletNotFoundError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findAll.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findAll.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/get(CredentialsController_findAll)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CredentialsController_findAll.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CredentialsController_findAll.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/500/content/json/case1`.
                        case LoadCredentialsError(Components.Schemas.LoadCredentialsError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .LoadCredentialsError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .LoadCredentialsError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/GET/responses/500/content/application\/json`.
                    case json(Operations.CredentialsController_findAll.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_findAll.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findAll.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findAll.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/get(CredentialsController_findAll)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.CredentialsController_findAll.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.CredentialsController_findAll.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get credential by ID
    ///
    /// Fetch credential information by ID stored inside the Wallet
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/get(CredentialsController_findOne)`.
    public enum CredentialsController_findOne {
        public static let id: Swift.String = "CredentialsController_findOne"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/path/vcId`.
                public var vcId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - vcId:
                public init(
                    walletId: Swift.String,
                    vcId: Swift.String
                ) {
                    self.walletId = walletId
                    self.vcId = vcId
                }
            }
            public var path: Operations.CredentialsController_findOne.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_findOne.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_findOne.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CredentialsController_findOne.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CredentialsController_findOne.Input.Path,
                headers: Operations.CredentialsController_findOne.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CredentialResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findOne.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findOne.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Wallet credential by ID successfully loaded
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/get(CredentialsController_findOne)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CredentialsController_findOne.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CredentialsController_findOne.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidPathParamError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidPathParamError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findOne.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findOne.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/get(CredentialsController_findOne)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CredentialsController_findOne.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CredentialsController_findOne.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/404/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/404/content/json/case1`.
                        case WalletNotFoundError(Components.Schemas.WalletNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/404/content/json/case2`.
                        case CredentialNotFoundError(Components.Schemas.CredentialNotFoundError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .WalletNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CredentialNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .WalletNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .CredentialNotFoundError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/404/content/application\/json`.
                    case json(Operations.CredentialsController_findOne.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_findOne.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findOne.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findOne.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/get(CredentialsController_findOne)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CredentialsController_findOne.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CredentialsController_findOne.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/500/content/json/case1`.
                        case LoadCredentialError(Components.Schemas.LoadCredentialError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .LoadCredentialError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .LoadCredentialError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/GET/responses/500/content/application\/json`.
                    case json(Operations.CredentialsController_findOne.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_findOne.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_findOne.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_findOne.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/get(CredentialsController_findOne)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.CredentialsController_findOne.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.CredentialsController_findOne.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Patch credential by ID
    ///
    /// Patches credential stored inside a Wallet.
    ///
    /// Used to update `did` and `kid` fields in the meta data of the credential. Note that the `did` and `kid` need to reference an existing DID and Key Id.
    ///
    ///
    /// - Remark: HTTP `PATCH /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/patch(CredentialsController_patch)`.
    public enum CredentialsController_patch {
        public static let id: Swift.String = "CredentialsController_patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/path/vcId`.
                public var vcId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - vcId:
                public init(
                    walletId: Swift.String,
                    vcId: Swift.String
                ) {
                    self.walletId = walletId
                    self.vcId = vcId
                }
            }
            public var path: Operations.CredentialsController_patch.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CredentialsController_patch.Input.Headers
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.CredentialPatchRequestModelDto)
            }
            public var body: Operations.CredentialsController_patch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CredentialsController_patch.Input.Path,
                headers: Operations.CredentialsController_patch.Input.Headers = .init(),
                body: Operations.CredentialsController_patch.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/204/content/application\/json`.
                    case json(Components.Schemas.CredentialResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_patch.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_patch.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// Wallet credential successfully patched
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/patch(CredentialsController_patch)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.CredentialsController_patch.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.CredentialsController_patch.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/404/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/404/content/json/case1`.
                        case WalletNotFoundError(Components.Schemas.WalletNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/404/content/json/case2`.
                        case CredentialNotFoundError(Components.Schemas.CredentialNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/404/content/json/case3`.
                        case KeyNotFoundError(Components.Schemas.KeyNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/404/content/json/case4`.
                        case DidNotFoundError(Components.Schemas.DidNotFoundError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .WalletNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CredentialNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .KeyNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .DidNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .WalletNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .CredentialNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .KeyNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .DidNotFoundError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/PATCH/responses/404/content/application\/json`.
                    case json(Operations.CredentialsController_patch.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_patch.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_patch.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_patch.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/patch(CredentialsController_patch)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CredentialsController_patch.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CredentialsController_patch.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete credential by ID
    ///
    /// Deletes credential by ID stored inside the Wallet
    ///
    /// - Remark: HTTP `DELETE /wallets/{walletId}/credentials/{vcId}`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/delete(CredentialsController_remove)`.
    public enum CredentialsController_remove {
        public static let id: Swift.String = "CredentialsController_remove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/path/vcId`.
                public var vcId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - vcId:
                public init(
                    walletId: Swift.String,
                    vcId: Swift.String
                ) {
                    self.walletId = walletId
                    self.vcId = vcId
                }
            }
            public var path: Operations.CredentialsController_remove.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_remove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_remove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CredentialsController_remove.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CredentialsController_remove.Input.Path,
                headers: Operations.CredentialsController_remove.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Wallet credential by ID successfuly removed
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/delete(CredentialsController_remove)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.CredentialsController_remove.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.CredentialsController_remove.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidPathParamError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidPathParamError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_remove.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_remove.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/delete(CredentialsController_remove)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CredentialsController_remove.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CredentialsController_remove.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/404/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/404/content/json/case1`.
                        case WalletNotFoundError(Components.Schemas.WalletNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/404/content/json/case2`.
                        case CredentialNotFoundError(Components.Schemas.CredentialNotFoundError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .WalletNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CredentialNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .WalletNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .CredentialNotFoundError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/404/content/application\/json`.
                    case json(Operations.CredentialsController_remove.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_remove.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_remove.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_remove.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/delete(CredentialsController_remove)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CredentialsController_remove.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CredentialsController_remove.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/500/content/json/case1`.
                        case DeleteCredentialError(Components.Schemas.DeleteCredentialError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .DeleteCredentialError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .DeleteCredentialError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/DELETE/responses/500/content/application\/json`.
                    case json(Operations.CredentialsController_remove.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_remove.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_remove.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_remove.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/delete(CredentialsController_remove)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.CredentialsController_remove.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.CredentialsController_remove.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Verify credential by ID
    ///
    /// Verifies a verifiable credential by ID that is stored inside the Wallet
    ///
    /// - Remark: HTTP `GET /wallets/{walletId}/credentials/{vcId}/verify`.
    /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/verify/get(CredentialsController_verify)`.
    public enum CredentialsController_verify {
        public static let id: Swift.String = "CredentialsController_verify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/path/walletId`.
                public var walletId: Swift.String
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/path/vcId`.
                public var vcId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - walletId:
                ///   - vcId:
                public init(
                    walletId: Swift.String,
                    vcId: Swift.String
                ) {
                    self.walletId = walletId
                    self.vcId = vcId
                }
            }
            public var path: Operations.CredentialsController_verify.Input.Path
            /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_verify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CredentialsController_verify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CredentialsController_verify.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CredentialsController_verify.Input.Path,
                headers: Operations.CredentialsController_verify.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CredentialVerificationResponseDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CredentialVerificationResponseDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_verify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_verify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Credential verification complete
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/verify/get(CredentialsController_verify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CredentialsController_verify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CredentialsController_verify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.InvalidPathParamError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InvalidPathParamError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_verify.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_verify.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/verify/get(CredentialsController_verify)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CredentialsController_verify.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CredentialsController_verify.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/404/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/404/content/json/case1`.
                        case WalletNotFoundError(Components.Schemas.WalletNotFoundError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/404/content/json/case2`.
                        case CredentialNotFoundError(Components.Schemas.CredentialNotFoundError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .WalletNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CredentialNotFoundError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .WalletNotFoundError(value):
                                try value.encode(to: encoder)
                            case let .CredentialNotFoundError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/404/content/application\/json`.
                    case json(Operations.CredentialsController_verify.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_verify.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_verify.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_verify.Output.NotFound.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/verify/get(CredentialsController_verify)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CredentialsController_verify.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CredentialsController_verify.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/500/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/500/content/json/case1`.
                        case VerifyCredentialError(Components.Schemas.VerifyCredentialError)
                        /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/500/content/json/case2`.
                        case InternalServerError(Components.Schemas.InternalServerError)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .VerifyCredentialError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .InternalServerError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .VerifyCredentialError(value):
                                try value.encode(to: encoder)
                            case let .InternalServerError(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallets/{walletId}/credentials/{vcId}/verify/GET/responses/500/content/application\/json`.
                    case json(Operations.CredentialsController_verify.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CredentialsController_verify.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CredentialsController_verify.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CredentialsController_verify.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//wallets/{walletId}/credentials/{vcId}/verify/get(CredentialsController_verify)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.CredentialsController_verify.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.CredentialsController_verify.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
